The following options can be passed to any command:

      --alsologtostderr=false: log to standard error as well as files
      --as='': Username to impersonate for the operation
      --as-group=[]: Group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --cache-dir='C:\Users\xavierd\.kube\http-cache': Default HTTP cache directory
      --certificate-authority='': Path to a cert file for the certificate authority
      --client-certificate='': Path to a client certificate file for TLS
      --client-key='': Path to a client key file for TLS
      --cluster='': The name of the kubeconfig cluster to use
      --config='': Path to the kubeconfig file to use for CLI requests.
      --context='': The name of the kubeconfig context to use
      --httptest.serve='': if non-empty, httptest.NewServer serves on this address and blocks
      --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will
make your HTTPS connections insecure
      --kubeconfig='': Path to the kubeconfig file to use for CLI requests.
      --log-flush-frequency=5s: Maximum number of seconds between log flushes
      --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace
      --log_dir='': If non-empty, write log files in this directory
      --loglevel=0: Set the level of log output (0-10)
      --logspec='': Set per module logging with file|pattern=LEVEL,...
      --logtostderr=true: log to standard error instead of files
      --match-server-version=false: Require server version to match client version
  -n, --namespace='': If present, the namespace scope for this CLI request
      --request-timeout='0': The length of time to wait before giving up on a single server request. Non-zero values
should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.
  -s, --server='': The address and port of the Kubernetes API server
      --stderrthreshold=2: logs at or above this threshold go to stderr
      --token='': Bearer token for authentication to the API server
      --user='': The name of the kubeconfig user to use

>oc help 
OpenShift Client 

This client helps you develop, build, deploy, and run your applications on any OpenShift or Kubernetes compatible platform. It also includes the administrative commands for managing a cluster under the 'adm' subcommand.

Usage:
  oc [flags]

Basic Commands:
  types           An introduction to concepts and types
  login           Log in to a server
  new-project     Request a new project
  new-app         Create a new application
  status          Show an overview of the current project
  project         Switch to another project
  projects        Display existing projects
  explain         Documentation of resources
  cluster         Start and stop OpenShift cluster

Build and Deploy Commands:
  rollout         Manage a Kubernetes deployment or OpenShift deployment config
  rollback        Revert part of an application back to a previous deployment
  new-build       Create a new build configuration
  start-build     Start a new build
  cancel-build    Cancel running, pending, or new builds
  import-image    Imports images from a Docker registry
  tag             Tag existing images into image streams

Application Management Commands:
  get             Display one or many resources
  describe        Show details of a specific resource or group of resources
  edit            Edit a resource on the server
  set             Commands that help set specific features on objects
  label           Update the labels on a resource
  annotate        Update the annotations on a resource
  expose          Expose a replicated application as a service or route
  delete          Delete one or more resources
  scale           Change the number of pods in a deployment
  autoscale       Autoscale a deployment config, deployment, replication controller, or replica set
  secrets         Manage secrets
  serviceaccounts Manage service accounts in your project

Troubleshooting and Debugging Commands:
  logs            Print the logs for a resource
  rsh             Start a shell session in a pod
  rsync           Copy files between local filesystem and a pod
  port-forward    Forward one or more local ports to a pod
  debug           Launch a new instance of a pod for debugging
  exec            Execute a command in a container
  proxy           Run a proxy to the Kubernetes API server
  attach          Attach to a running container
  run             Run a particular image on the cluster
  cp              Copy files and directories to and from containers.
  wait            Experimental: Wait for one condition on one or many resources

Advanced Commands:
  adm             Tools for managing a cluster
  create          Create a resource from a file or from stdin.
  replace         Replace a resource by filename or stdin
  apply           Apply a configuration to a resource by filename or stdin
  patch           Update field(s) of a resource using strategic merge patch
  process         Process a template into list of resources
  export          Export resources so they can be used elsewhere
  extract         Extract secrets or config maps to disk
  idle            Idle scalable resources
  observe         Observe changes to resources and react to them (experimental)
  policy          Manage authorization policy
  auth            Inspect authorization
  convert         Convert config files between different API versions
  import          Commands that import applications
  image           Useful commands for managing images
  registry        Commands for working with the registry
  api-versions    Print the supported API versions on the server, in the form of "group/version"
  api-resources   Print the supported API resources on the server

Settings Commands:
  logout          End the current server session
  config          Change configuration files for the client
  whoami          Return information about the current session
  completion      Output shell completion code for the specified shell (bash or zsh)

Other Commands:
  ex              Experimental commands under active development
  help            Help about any command
  plugin          Runs a command-line plugin
  version         Display client and server versions

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc options 

>oc help types 
Concepts and Types 

Kubernetes and OpenShift help developers and operators build, test, and deploy applications in a containerized cloud environment. Applications may be composed of all of the components below, although most developers will be concerned with Services, Deployments, and Builds for delivering changes. 

Concepts: 

* Containers:
    A definition of how to run one or more processes inside of a portable Linux
    environment. Containers are started from an Image and are usually isolated
    from other containers on the same machine.
    
* Image:
    A layered Linux filesystem that contains application code, dependencies,
    and any supporting operating system libraries. An image is identified by
    a name that can be local to the current cluster or point to a remote Docker
    registry (a storage server for images).
    
* Pods [pod]:
    A set of one or more containers that are deployed onto a Node together and
    share a unique IP and Volumes (persistent storage). Pods also define the
    security and runtime policy for each container.
    
* Labels:
    Labels are key value pairs that can be assigned to any resource in the
    system for grouping and selection. Many resources use labels to identify
    sets of other resources.
    
* Volumes:
    Containers are not persistent by default - on restart their contents are
    cleared. Volumes are mounted filesystems available to Pods and their
    containers which may be backed by a number of host-local or network
    attached storage endpoints. The simplest volume type is EmptyDir, which
    is a temporary directory on a single machine. Administrators may also
    allow you to request a Persistent Volume that is automatically attached
    to your pods.
    
* Nodes [node]:
    Machines set up in the cluster to run containers. Usually managed
    by administrators and not by end users.
    
* Services [svc]:
    A name representing a set of pods (or external servers) that are
    accessed by other pods. The service gets an IP and a DNS name, and can be
    exposed externally to the cluster via a port or a Route. It's also easy
    to consume services from pods because an environment variable with the
    name <SERVICE>_HOST is automatically injected into other pods.
    
* Routes [route]:
    A route is an external DNS entry (either a top level domain or a
    dynamically allocated name) that is created to point to a service so that
    it can be accessed outside the cluster. The administrator may configure
    one or more Routers to handle those routes, typically through an Apache
    or HAProxy load balancer / proxy.
    
* Replication Controllers [rc]:
    A replication controller maintains a specific number of pods based on a
    template that match a set of labels. If pods are deleted (because the
    node they run on is taken out of service) the controller creates a new
    copy of that pod. A replication controller is most commonly used to
    represent a single deployment of part of an application based on a
    built image.
    
* Deployment Configuration [dc]:
    Defines the template for a pod and manages deploying new images or
    configuration changes whenever those change. A single deployment
    configuration is usually analogous to a single micro-service. Can support
    many different deployment patterns, including full restart, customizable
    rolling updates, and fully custom behaviors, as well as pre- and post-
    hooks. Each deployment is represented as a replication controller.
    
* Build Configuration [bc]:
    Contains a description of how to build source code and a base image into a
    new image - the primary method for delivering changes to your application.
    Builds can be source based and use builder images for common languages like
    Java, PHP, Ruby, or Python, or be Docker based and create builds from a
    Dockerfile. Each build configuration has web-hooks and can be triggered
    automatically by changes to their base images.
    
* Builds [build]:
    Builds create a new image from source code, other images, Dockerfiles, or
    binary input. A build is run inside of a container and has the same
    restrictions normal pods have. A build usually results in an image pushed
    to a Docker registry, but you can also choose to run a post-build test that
    does not push an image.
    
* Image Streams and Image Stream Tags [is,istag]:
    An image stream groups sets of related images under tags - analogous to a
    branch in a source code repository. Each image stream may have one or
    more tags (the default tag is called "latest") and those tags may point
    at external Docker registries, at other tags in the same stream, or be
    controlled to directly point at known images. In addition, images can be
    pushed to an image stream tag directly via the integrated Docker
    registry.
    
* Secrets [secret]:
    The secret resource can hold text or binary secrets for delivery into
    your pods. By default, every container is given a single secret which
    contains a token for accessing the API (with limited privileges) at
    /var/run/secrets/kubernetes.io/serviceaccount. You can create new
    secrets and mount them in your own pods, as well as reference secrets
    from builds (for connecting to remote servers) or use them to import
    remote images into an image stream.
    
* Projects [project]:
    All of the above resources (except Nodes) exist inside of a project.
    Projects have a list of members and their roles, like viewer, editor,
    or admin, as well as a set of security controls on the running pods, and
    limits on how many resources the project can use. The names of each
    resource are unique within a project. Developers may request projects
    be created, but administrators control the resources allocated to
    projects.
    
For more, see https://docs.openshift.com

Usage:
  oc types [flags]

Examples:
  # View all projects you have access to
  oc get projects
  
  # See a list of all services in the current project
  oc get svc
  
  # Describe a deployment configuration in detail
  oc describe dc mydeploymentconfig
  
  # Show the images tagged into an image stream
  oc describe is ruby-centos7

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help login 
Log in to your server and save login for subsequent use 

First-time users of the client should run this command to connect to a server, establish an authenticated session, and save connection to the configuration file. The default configuration will be saved to your home directory under ".kube/config". 

The information required to login -- like username and password, a session token, or the server details -- can be provided through flags. If not provided, the command will prompt for user input as needed.

Usage:
  oc login [URL] [flags]

Examples:
  # Log in interactively
  oc login
  
  # Log in to the given server with the given certificate authority file
  oc login localhost:8443 --certificate-authority=/path/to/cert.crt
  
  # Log in to the given server with the given credentials (will not prompt interactively)
  oc login localhost:8443 --username=myuser --password=mypass

Options:
  -p, --password='': Password, will prompt if not provided
  -u, --username='': Username, will prompt if not provided      --certificate-authority='': Path to a cert file for the certificate authority
      --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --token='': Bearer token for authentication to the API server

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help new-project 
Create a new project for yourself 

If your administrator allows self-service, this command will create a new project for you and assign you as the project admin. 

After your project is created it will become the default project in your config.

Usage:
  oc new-project NAME [--display-name=DISPLAYNAME] [--description=DESCRIPTION] [flags]

Examples:
  # Create a new project with minimal information
  oc new-project web-team-dev
  
  # Create a new project with a display name and description
  oc new-project web-team-dev --display-name="Web Team Development" --description="Development project for the web team."

Options:
      --description='': Project description
      --display-name='': Project display name
      --skip-config-write=false: If true, the project will not be set as a cluster entry in kubeconfig after being created

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help new-app 
Create a new application by specifying source code, templates, and/or images 

This command will try to build up the components of an application using images, templates, or code that has a public repository. It will lookup the images on the local Docker installation (if available), a Docker registry, an integrated image stream, or stored templates. 

If you specify a source code URL, it will set up a build that takes your source code and converts it into an image that can run inside of a pod. Local source must be in a git repository that has a remote repository that the server can see. The images will be deployed via a deployment configuration, and a service will be connected to the first public port of the app. You may either specify components using the various existing flags or let new-app autodetect what kind of components you have provided. 

If you provide source code, a new build will be automatically triggered. You can use 'oc status' to check the progress.

Usage:
  oc new-app (IMAGE | IMAGESTREAM | TEMPLATE | PATH | URL ...) [flags]

Examples:
  # List all local templates and image streams that can be used to create an app
  oc new-app --list
  
  # Create an application based on the source code in the current git repository (with a public remote)
  # and a Docker image
  oc new-app . --docker-image=repo/langimage
  
  # Create a Ruby application based on the provided [image]~[source code] combination
  oc new-app centos/ruby-25-centos7~https://github.com/sclorg/ruby-ex.git
  
  # Use the public Docker Hub MySQL image to create an app. Generated artifacts will be labeled with db=mysql
  oc new-app mysql MYSQL_USER=user MYSQL_PASSWORD=pass MYSQL_DATABASE=testdb -l db=mysql
  
  # Use a MySQL image in a private registry to create an app and override application artifacts' names
  oc new-app --docker-image=myregistry.com/mycompany/mysql --name=private
  
  # Create an application from a remote repository using its beta4 branch
  oc new-app https://github.com/openshift/ruby-hello-world#beta4
  
  # Create an application based on a stored template, explicitly setting a parameter value
  oc new-app --template=ruby-helloworld-sample --param=MYSQL_USER=admin
  
  # Create an application from a remote repository and specify a context directory
  oc new-app https://github.com/youruser/yourgitrepo --context-dir=src/build
  
  # Create an application from a remote private repository and specify which existing secret to use
  oc new-app https://github.com/youruser/yourgitrepo --source-secret=yoursecret
  
  # Create an application based on a template file, explicitly setting a parameter value
  oc new-app --file=./example/myapp/template.json --param=MYSQL_USER=admin
  
  # Search all templates, image streams, and Docker images for the ones that match "ruby"
  oc new-app --search ruby
  
  # Search for "ruby", but only in stored templates (--template, --image-stream and --docker-image
  # can be used to filter search results)
  oc new-app --search --template=ruby
  
  # Search for "ruby" in stored templates and print the output as an YAML
  oc new-app --search --template=ruby --output=yaml

Options:
      --allow-missing-images=false: If true, indicates that referenced Docker images that cannot be found locally or in a registry should still be used.
      --allow-missing-imagestream-tags=false: If true, indicates that image stream tags that don't exist should still be used.
      --allow-missing-template-keys=false: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --as-test=false: If true create this application as a test deployment, which validates that the deployment succeeds and then scales down.
      --build-env=[]: Specify a key-value pair for an environment variable to set into each build image.
      --build-env-file=[]: File containing key-value pairs of environment variables to set into each build image.
      --code=[]: Source code to use to build this application.
      --context-dir='': Context directory to be used for the build.
      --docker-image=[]: Name of a Docker image to include in the app.
      --dry-run=false: If true, show the result of the operation without performing it.
  -e, --env=[]: Specify a key-value pair for an environment variable to set into each container.
      --env-file=[]: File containing key-value pairs of environment variables to set into each container.
  -f, --file=[]: Path to a template file to use for the app.
      --grant-install-rights=false: If true, a component that requires access to your account may use your token to install software into your project. Only grant images you trust the right to run with your token.
      --group=[]: Indicate components that should be grouped together as <comp1>+<comp2>.
      --ignore-unknown-parameters=false: If true, will not stop processing if a provided parameter does not exist in the template.
  -i, --image-stream=[]: Name of an image stream to use in the app.
      --insecure-registry=false: If true, indicates that the referenced Docker images are on insecure registries and should bypass certificate checking
  -l, --labels='': Label to set in all resources for this application.
  -L, --list=false: List all local templates and image streams that can be used to create.
      --name='': Set name to use for generated application artifacts
      --no-install=false: Do not attempt to run images that describe themselves as being installable
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
      --output-version='': The preferred API versions of the output objects
  -p, --param=[]: Specify a key-value pair (e.g., -p FOO=BAR) to set/override a parameter value in the template.
      --param-file=[]: File containing parameter values to set/override in the template.
  -S, --search=false: Search all templates, image streams, and Docker images that match the arguments provided.
  -a, --show-all=true: When printing, show all resources (false means hide terminated pods.)
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.
      --source-secret='': The name of an existing secret that should be used for cloning a private git repository.
      --strategy=: Specify the build strategy to use if you don't want to detect (docker|pipeline|source).
      --template=[]: Name of a stored template to use in the app.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help status 
Show a high level overview of the current project 

This command will show services, deployment configs, build configurations, and active deployments. If you have any misconfigured components information about them will be shown. For more information about individual items, use the describe command (e.g. oc describe buildConfig, oc describe deploymentConfig, oc describe service). 

You can specify an output format of "-o dot" to have this command output the generated status graph in DOT format that is suitable for use by the "dot" command.

Usage:
  oc status [-o dot | --suggest ] [flags]

Examples:
  # See an overview of the current project.
  oc status
  
  # Export the overview of the current project in an svg file.
  oc status -o dot | dot -T svg -o project.svg
  
  # See an overview of the current project including details for any identified issues.
  oc status --suggest

Options:
      --all-namespaces=false: If true, display status for all namespaces (must have cluster admin)
  -o, --output='': Output format. One of: dot.
      --suggest=false: See details for resolving issues.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help project 
Switch to another project and make it the default in your configuration 

If no project was specified on the command line, display information about the current active project. Since you can use this command to connect to projects on different servers, you will occasionally encounter projects of the same name on different servers. When switching to that project, a new local context will be created that will have a unique name - for instance, 'myapp-2'. If you have previously created a context with a different name than the project name, this command will accept that context name instead. 

For advanced configuration, or to manage the contents of your config file, use the 'config' command.

Usage:
  oc project [NAME] [flags]

Examples:
  # Switch to 'myapp' project
  oc project myapp
  
  # Display the project currently in use
  oc project

Options:
  -q, --short=false: If true, display only the project name

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help projects 
Display information about the current active project and existing projects on the server. 

For advanced configuration, or to manage the contents of your config file, use the 'config' command.

Usage:
  oc projects [flags]

Options:
  -q, --short=false: If true, display only the project names

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help explain 
Documentation of resources. 

Possible resource types include: pods (po), services (svc), replicationcontrollers (rc), nodes (no), events (ev), componentstatuses (cs), limitranges (limits), persistentvolumes (pv), persistentvolumeclaims (pvc), resourcequotas (quota), namespaces (ns) or endpoints (ep).

Usage:
  oc explain RESOURCE [flags]

Examples:
  # Get the documentation of the resource and its fields
  oc explain pods
  
  # Get the documentation of a specific field of a resource
  oc explain pods.spec.containers

Options:
      --api-version='': Get different explanations for particular API version
      --recursive=false: Print the fields of fields (Currently only 1 level deep)

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help cluster 
Manage a local OpenShift cluster 

The OpenShift cluster will run as an all-in-one container on a Docker host. The Docker host may be a local VM (ie. using docker-machine on OS X and Windows clients), remote machine, or the local Unix host. 

Use the 'up' command to start a new cluster on a docker host. 

To use an existing Docker connection, ensure that Docker commands are working and that you can create new containers. 

Default routes are setup using nip.io and the host ip of your cluster. To use a different routing suffix, use the --routing-suffix flag.

Usage:
  oc cluster ACTION [flags]

Available Commands:
  add         Add components to an 'oc cluster up' cluster
  down        Stop OpenShift on Docker
  status      Show OpenShift on Docker status
  up          Start OpenShift on Docker with reasonable defaults

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc help rollout 
Start a new rollout, view its status or history, rollback to a previous revision of your app 

This command allows you to control a deployment config. Each individual rollout is exposed as a replication controller, and the deployment process manages scaling down old replication controllers and scaling up new ones. 

There are several deployment strategies defined: 

  * Rolling (default) - scales up the new replication controller in stages, gradually reducing the number of old pods. If one of the new deployed pods never becomes "ready", the new rollout will be rolled back (scaled down to zero). Use when your application can tolerate two versions of code running at the same time (many web applications, scalable databases)  
  * Recreate - scales the old replication controller down to zero, then scales the new replication controller up to full. Use when your application cannot tolerate two versions of code running at the same time  
  * Custom - run your own deployment process inside a Docker container using your own scripts.

Usage:
  oc rollout SUBCOMMAND [flags]

Available Commands:
  cancel      cancel the in-progress deployment
  history     View rollout history
  latest      Start a new rollout for a deployment config with the latest state from its triggers
  pause       Mark the provided resource as paused
  resume      Resume a paused resource
  retry       Retry the latest failed rollout
  status      Show the status of the rollout
  undo        Undo a previous rollout

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc help rollback 
Revert an application back to a previous deployment 

When you run this command your deployment configuration will be updated to match a previous deployment. By default only the pod and container configuration will be changed and scaling or trigger settings will be left as- is. Note that environment variables and volumes are included in rollbacks, so if you've recently updated security credentials in your environment your previous deployment may not have the correct values. 

Any image triggers present in the rolled back configuration will be disabled with a warning. This is to help prevent your rolled back deployment from being replaced by a triggered deployment soon after your rollback. To re-enable the triggers, use the 'deploy' command. 

If you would like to review the outcome of the rollback, pass '--dry-run' to print a human-readable representation of the updated deployment configuration instead of executing the rollback. This is useful if you're not quite sure what the outcome will be.

Usage:
  oc rollback (DEPLOYMENTCONFIG | DEPLOYMENT) [flags]

Examples:
  # Perform a rollback to the last successfully completed deployment for a deploymentconfig
  oc rollback frontend
  
  # See what a rollback to version 3 will look like, but don't perform the rollback
  oc rollback frontend --to-version=3 --dry-run
  
  # Perform a rollback to a specific deployment
  oc rollback frontend-2
  
  # Perform the rollback manually by piping the JSON of the new config back to oc
  oc rollback frontend -o json | oc replace dc/frontend -f -
  
  # Print the updated deployment configuration in JSON format instead of performing the rollback
  oc rollback frontend -o json

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --change-scaling-settings=false: If true, include the previous deployment's replicationController replica count and selector in the rollback
      --change-strategy=false: If true, include the previous deployment's strategy in the rollback
      --change-triggers=false: If true, include the previous deployment's triggers in the rollback
  -d, --dry-run=false: Instead of performing the rollback, describe what the rollback will look like in human-readable form
  -o, --output='': Output format. One of: json|yaml|name|go-template-file|templatefile|template|go-template|jsonpath|jsonpath-file.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --to-version=0: A config version to rollback to. Specifying version 0 is the same as omitting a version (the version will be auto-detected). This option is ignored when specifying a deployment.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help new-build 
Create a new build by specifying source code 

This command will try to create a build configuration for your application using images and code that has a public repository. It will lookup the images on the local Docker installation (if available), a Docker registry, or an image stream. 

If you specify a source code URL, it will set up a build that takes your source code and converts it into an image that can run inside of a pod. Local source must be in a git repository that has a remote repository that the server can see. 

Once the build configuration is created a new build will be automatically triggered. You can use 'oc status' to check the progress.

Usage:
  oc new-build (IMAGE | IMAGESTREAM | PATH | URL ...) [flags]

Examples:
  # Create a build config based on the source code in the current git repository (with a public
  # remote) and a Docker image
  oc new-build . --docker-image=repo/langimage
  
  # Create a NodeJS build config based on the provided [image]~[source code] combination
  oc new-build centos/nodejs-8-centos7~https://github.com/sclorg/nodejs-ex.git
  
  # Create a build config from a remote repository using its beta2 branch
  oc new-build https://github.com/openshift/ruby-hello-world#beta2
  
  # Create a build config using a Dockerfile specified as an argument
  oc new-build -D $'FROM centos:7\nRUN yum install -y httpd'
  
  # Create a build config from a remote repository and add custom environment variables
  oc new-build https://github.com/openshift/ruby-hello-world -e RACK_ENV=development
  
  # Create a build config from a remote private repository and specify which existing secret to use
  oc new-build https://github.com/youruser/yourgitrepo --source-secret=yoursecret
  
  # Create a build config from a remote repository and inject the npmrc into a build
  oc new-build https://github.com/openshift/ruby-hello-world --build-secret npmrc:.npmrc
  
  # Create a build config from a remote repository and inject environment data into a build
  oc new-build https://github.com/openshift/ruby-hello-world --build-config-map env:config
  
  # Create a build config that gets its input from a remote repository and another Docker image
  oc new-build https://github.com/openshift/ruby-hello-world --source-image=openshift/jenkins-1-centos7 --source-image-path=/var/lib/jenkins:tmp

Options:
      --allow-missing-images=false: If true, indicates that referenced Docker images that cannot be found locally or in a registry should still be used.
      --allow-missing-imagestream-tags=false: If true, indicates that image stream tags that don't exist should still be used.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --binary=false: Instead of expecting a source URL, set the build to expect binary contents. Will disable triggers.
      --build-arg=[]: Specify a key-value pair to pass to Docker during the build.
      --build-config-map=[]: ConfigMap and destination to use as an input for the build.
      --build-secret=[]: Secret and destination to use as an input for the build.
      --code=[]: Source code in the build configuration.
      --context-dir='': Context directory to be used for the build.
      --docker-image=[]: Name of a Docker image to use as a builder.
  -D, --dockerfile='': Specify the contents of a Dockerfile to build directly, implies --strategy=docker. Pass '-' to read from STDIN.
      --dry-run=false: If true, show the result of the operation without performing it.
  -e, --env=[]: Specify a key-value pair for an environment variable to set into resulting image.
      --env-file=[]: File containing key-value pairs of environment variables to set into each container.
  -i, --image-stream=[]: Name of an image stream to to use as a builder.
  -l, --labels='': Label to set in all generated resources.
      --name='': Set name to use for generated build artifacts.
      --no-output=false: If true, the build output will not be pushed anywhere.
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath-file|jsonpath.
      --output-version='': The preferred API versions of the output objects
      --push-secret='': The name of an existing secret that should be used for pushing the output image.
  -a, --show-all=true: When printing, show all resources (false means hide terminated pods.)
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.
      --source-image='': Specify an image to use as source for the build.  You must also specify --source-image-path.
      --source-image-path='': Specify the file or directory to copy from the source image and its destination in the build directory. Format: [source]:[destination-dir].
      --source-secret='': The name of an existing secret that should be used for cloning a private git repository.
      --strategy=: Specify the build strategy to use if you don't want to detect (docker|pipeline|source).
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --to='': Push built images to this image stream tag (or Docker image repository if --to-docker is set).
      --to-docker=false: If true, have the build output push to a Docker repository.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help start-build 
Start a build 

This command starts a new build for the provided build config or copies an existing build using --from-build= <name>. Pass the --follow flag to see output from the build. 

In addition, you can pass a file, directory, or source code repository with the --from-file, --from-dir, or --from-repo flags directly to the build. The contents will be streamed to the build and override the current build source settings. When using --from-repo, the --commit flag can be used to control which branch, tag, or commit is sent to the server. If you pass --from-file, the file is placed in the root of an empty directory with the same filename. It is also possible to pass a http or https url to --from-file and --from-archive, however authentication is not supported and in case of https the certificate must be valid and recognized by your system. 

Note that builds triggered from binary input will not preserve the source on the server, so rebuilds triggered by base image changes will use the source specified on the build config.

Usage:
  oc start-build (BUILDCONFIG | --from-build=BUILD) [flags]

Examples:
  # Starts build from build config "hello-world"
  oc start-build hello-world
  
  # Starts build from a previous build "hello-world-1"
  oc start-build --from-build=hello-world-1
  
  # Use the contents of a directory as build input
  oc start-build hello-world --from-dir=src/
  
  # Send the contents of a Git repository to the server from tag 'v2'
  oc start-build hello-world --from-repo=../hello-world --commit=v2
  
  # Start a new build for build config "hello-world" and watch the logs until the build
  # completes or fails.
  oc start-build hello-world --follow
  
  # Start a new build for build config "hello-world" and wait until the build completes. It
  # exits with a non-zero return code if the build fails.
  oc start-build hello-world --wait

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --build-arg=[]: Specify a key-value pair to pass to Docker during the build.
      --build-loglevel='': Specify the log level for the build log output
      --commit='': Specify the source code commit identifier the build should use; requires a build based on a Git repository
  -e, --env=[]: Specify a key-value pair for an environment variable to set for the build container.
  -F, --follow=false: Start a build and watch its logs until it completes or fails
      --from-archive='': An archive (tar, tar.gz, zip) to be extracted before the build and used as the binary input.
      --from-build='': Specify the name of a build which should be re-run
      --from-dir='': A directory to archive and use as the binary input for a build.
      --from-file='': A file to use as the binary input for the build; example a pom.xml or Dockerfile. Will be the only file in the build source.
      --from-repo='': The path to a local source code repository to use as the binary input for a build.
      --from-webhook='': Specify a generic webhook URL for an existing build config to trigger
      --git-post-receive='': The contents of the post-receive hook to trigger a build
      --git-repository='': The path to the git repository for post-receive; defaults to the current directory
      --incremental=false: Overrides the incremental setting in a source-strategy build, ignored if not specified
      --list-webhooks='': List the webhooks for the specified build config or build; accepts 'all', 'generic', or 'github'
      --no-cache=false: Overrides the noCache setting in a docker-strategy build, ignored if not specified
  -o, --output='': Output format. One of: json|yaml|name|go-template|go-template-file|templatefile|template|jsonpath-file|jsonpath.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
  -w, --wait=false: Wait for a build to complete and exit with a non-zero return code if the build fails

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help cancel-build 
Cancel running, pending, or new builds 

This command requests a graceful shutdown of the build. There may be a delay between requesting the build and the time the build is terminated.

Usage:
  oc cancel-build (BUILD | BUILDCONFIG) [flags]

Examples:
  # Cancel the build with the given name
  oc cancel-build ruby-build-2
  
  # Cancel the named build and print the build logs
  oc cancel-build ruby-build-2 --dump-logs
  
  # Cancel the named build and create a new one with the same parameters
  oc cancel-build ruby-build-2 --restart
  
  # Cancel multiple builds
  oc cancel-build ruby-build-1 ruby-build-2 ruby-build-3
  
  # Cancel all builds created from 'ruby-build' build configuration that are in 'new' state
  oc cancel-build bc/ruby-build --state=new

Options:
      --dump-logs=false: Specify if the build logs for the cancelled build should be shown.
      --restart=false: Specify if a new build should be created after the current build is cancelled.
      --state=[new,pending,running]: Only cancel builds in this state

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help import-image 
Import the latest image information from a tag in a Docker registry 

Image streams allow you to control which images are rolled out to your builds and applications. This command fetches the latest version of an image from a remote repository and updates the image stream tag if it does not match the previous value. Running the command multiple times will not create duplicate entries. When importing an image, only the image metadata is copied, not the image contents. 

If you wish to change the image stream tag or provide more advanced options, see the 'tag' command.

Usage:
  oc import-image IMAGESTREAM[:TAG] [flags]

Examples:
  oc import-image mystream

Options:
      --all=false: If true, import all tags from the provided source on creation or if --from is specified
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --confirm=false: If true, allow the image stream import location to be set or changed
      --dry-run=false: Fetch information about images without creating or updating an image stream.
      --from='': A Docker image repository to import images from
      --insecure=false: If true, allow importing from registries that have invalid HTTPS certificates or are hosted via HTTP. This flag will take precedence over the insecure annotation.
  -o, --output='': Output format. One of: json|yaml|name|templatefile|template|go-template|go-template-file|jsonpath|jsonpath-file.
      --reference-policy='source': Allow to request pullthrough for external image when set to 'local'. Defaults to 'source'.
      --scheduled=false: Set each imported Docker image to be periodically imported from a remote repository. Defaults to false.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help tag 
Tag existing images into image streams 

The tag command allows you to take an existing tag or image from an image stream, or a Docker image pull spec, and set it as the most recent image for a tag in 1 or more other image streams. It is similar to the 'docker tag' command, but it operates on image streams instead. 

Pass the --insecure flag if your external registry does not have a valid HTTPS certificate, or is only served over HTTP. Pass --scheduled to have the server regularly check the tag for updates and import the latest version (which can then trigger builds and deployments). Note that --scheduled is only allowed for Docker images.

Usage:
  oc tag [--source=SOURCETYPE] SOURCE DEST [DEST ...] [flags]

Examples:
  # Tag the current image for the image stream 'openshift/ruby' and tag '2.0' into the image stream 'yourproject/ruby with tag 'tip'.
  oc tag openshift/ruby:2.0 yourproject/ruby:tip
  
  # Tag a specific image.
  oc tag openshift/ruby@sha256:6b646fa6bf5e5e4c7fa41056c27910e679c03ebe7f93e361e6515a9da7e258cc yourproject/ruby:tip
  
  # Tag an external Docker image.
  oc tag --source=docker openshift/origin-control-plane:latest yourproject/ruby:tip
  
  # Tag an external Docker image and request pullthrough for it.
  oc tag --source=docker openshift/origin-control-plane:latest yourproject/ruby:tip --reference-policy=local
  
  # Remove the specified spec tag from an image stream.
  oc tag openshift/origin-control-plane:latest -d

Options:
      --alias=false: Should the destination tag be updated whenever the source tag changes. Applies only to a single image stream. Defaults to false.
  -d, --delete=false: Delete the provided spec tags.
      --insecure=false: Set to true if importing the specified Docker image requires HTTP or has a self-signed certificate. Defaults to false.
      --reference=false: Should the destination tag continue to pull from the source namespace. Defaults to false.
      --reference-policy='source': Allow to request pullthrough for external image when set to 'local'. Defaults to 'source'.
      --scheduled=false: Set a Docker image to be periodically imported from a remote repository. Defaults to false.
      --source='': Optional hint for the source type; valid values are 'imagestreamtag', 'istag', 'imagestreamimage', 'isimage', and 'docker'.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help get 
Display one or many resources 

Possible resources include builds, buildConfigs, services, pods, etc. To see a list of common resources, use 'oc get'. Some resources may omit advanced details that you can see with '-o wide'.  If you want an even more detailed view, use 'oc describe'.

Usage:
  oc get [(-o|--output=)json|yaml|wide|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]

Examples:
  # List all pods in ps output format.
  oc get pods
  
  # List a single replication controller with specified ID in ps output format.
  oc get rc redis
  
  # List all pods and show more details about them.
  oc get -o wide pods
  
  # List a single pod in JSON output format.
  oc get -o json pod redis-pod
  
  # Return only the status value of the specified pod.
  oc get -o template pod redis-pod --template={{.currentState.status}}

Options:
      --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --chunk-size=500: Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future.
      --export=false: If true, use 'export' for the resources.  Exported resources are stripped of cluster-specific information.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to get from a server.
      --ignore-not-found=false: If the requested object does not exist the command will return exit code 0.
      --include-uninitialized=false: If true, the kubectl command applies to uninitialized objects. If explicitly set to false, this flag overrides other flags that make the kubectl commands apply to uninitialized objects, e.g., "--all". Objects with empty metadata.initializers are regarded as initialized.
  -L, --label-columns=[]: Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...
      --no-headers=false: When using the default or custom-column output format, don't print headers (default print headers).
  -o, --output='': Output format. One of: json|yaml|wide|name|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=... See custom columns [http://kubernetes.io/docs/user-guide/kubectl-overview/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [http://kubernetes.io/docs/user-guide/jsonpath].
      --raw='': Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --server-print=true: If true, have the server return the appropriate table output. Supports extension APIs and CRDs.
      --show-kind=false: If present, list the resource type for the requested object(s).
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --use-openapi-print-columns=false: If true, use x-kubernetes-print-column metadata (if present) from the OpenAPI schema for displaying a resource.
  -w, --watch=false: After listing/getting the requested object, watch for changes. Uninitialized objects are excluded if no object name is provided.
      --watch-only=false: Watch for changes to the requested object(s), without listing/getting first.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help describe 
Show details of a specific resource 

This command joins many API calls together to form a detailed description of a given resource.

Usage:
  oc describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME) [flags]

Examples:
  # Provide details about the ruby-22-centos7 image repository
  oc describe imageRepository ruby-22-centos7
  
  # Provide details about the ruby-sample-build build configuration
  oc describe bc ruby-sample-build

Options:
      --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.
  -f, --filename=[]: Filename, directory, or URL to files containing the resource to describe
      --include-uninitialized=false: If true, the kubectl command applies to uninitialized objects. If explicitly set to false, this flag overrides other flags that make the kubectl commands apply to uninitialized objects, e.g., "--all". Objects with empty metadata.initializers are regarded as initialized.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --show-events=true: If true, display events related to the described object.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help edit 
Edit a resource from the default editor 

The edit command allows you to directly edit any API resource you can retrieve via the command line tools. It will open the editor defined by your OC _EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts filenames as well as command line arguments, although the files you point to must be previously saved versions of resources. 

The files to edit will be output in the default API version, or a version specified by --output-version. The default format is YAML - if you would like to edit in JSON pass -o json. The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used. 

In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.

Usage:
  oc edit (RESOURCE/NAME | -f FILENAME) [flags]

Examples:
  # Edit the service named 'docker-registry':
  oc edit svc/docker-registry
  
  # Edit the DeploymentConfig named 'my-deployment':
  oc edit dc/my-deployment
  
  # Use an alternative editor
  OC_EDITOR="nano" oc edit dc/my-deployment
  
  # Edit the service 'docker-registry' in JSON using the v1 API format:
  oc edit svc/docker-registry --output-version=v1 -o json

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
  -f, --filename=[]: Filename, directory, or URL to files to use to edit the resource
      --include-uninitialized=false: If true, the kubectl command applies to uninitialized objects. If explicitly set to false, this flag overrides other flags that make the kubectl commands apply to uninitialized objects, e.g., "--all". Objects with empty metadata.initializers are regarded as initialized.
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
      --output-patch=false: Output the patch if the resource is edited.
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --save-config=false: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --validate=false: If true, use a schema to validate the input before sending it
      --windows-line-endings=true: Defaults to the line ending native to your platform.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help set 
Configure application resources 

These commands help you make changes to existing application resources.

Usage:
  oc set COMMAND [flags]

Replication controllers, deployments, and daemon sets:
  env             Update environment variables on a pod template
  resources       Update resource requests/limits on objects with pod templates
  volumes         Update volumes on a pod template
  probe           Update a probe on a pod template
  deployment-hook Update a deployment hook on a deployment config
  image           Update image of a pod template

Manage secrets:
  build-secret    Update a build secret on a build config

Manage application flows:
  image-lookup    Change how images are resolved when deploying applications
  triggers        Update the triggers on one or more objects
  build-hook      Update a build hook on a build config

Control load balancing:
  route-backends  Update the backends for a route

Use "oc set <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc set env --help 
Update environment variables on a pod template or a build config 

List environment variable definitions in one or more pods, pod templates or build configuration. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations) or build configurations. View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard. 

If "--env -" is passed, environment variables can be read from STDIN using the standard env syntax.

Usage:
  oc set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N [flags]

Examples:
  # Update deployment 'registry' with a new environment variable
  oc set env dc/registry STORAGE_DIR=/local
  
  # List the environment variables defined on a build config 'sample-build'
  oc set env bc/sample-build --list
  
  # List the environment variables defined on all pods
  oc set env pods --all --list
  
  # Output modified build config in YAML
  oc set env bc/sample-build STORAGE_DIR=/data -o yaml
  
  # Update all containers in all replication controllers in the project to have ENV=prod
  oc set env rc --all ENV=prod
  
  # Import environment from a secret
  oc set env --from=secret/mysecret dc/myapp
  
  # Import environment from a config map with a prefix
  oc set env --from=configmap/myconfigmap --prefix=MYSQL_ dc/myapp
  
  # Remove the environment variable ENV from container 'c1' in all deployment configs
  oc set env dc --all --containers="c1" ENV-
  
  # Remove the environment variable ENV from a deployment config definition on disk and
  # update the deployment config on the server
  oc set env -f dc.json ENV-
  
  # Set some of the local shell environment into a deployment config on the server
  env | grep RAILS_ | oc set env -e - dc/registry

Options:
      --all=false: If true, select all resources in the namespace of the specified resource types
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
  -c, --containers='*': The names of containers in the selected pod templates to change - may use wildcards
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -e, --env=[]: Specify a key-value pair for an environment variable to set into each container.
  -f, --filename=[]: Filename, directory, or URL to files to use to edit the resource
      --from='': The name of a resource from which to inject environment variables
      --list=false: If true, display the environment and any changes in the standard format
      --local=false: If true, set image will NOT contact api-server but run locally.
  -o, --output='': Output format. One of: json|yaml|name|go-template-file|templatefile|template|go-template|jsonpath-file|jsonpath.
      --overwrite=true: If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment.
      --prefix='': Prefix to append to variable names
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --resolve=false: If true, show secret or configmap references when listing variables
      --resource-version='': If non-empty, the labels update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.
  -l, --selector='': Selector (label query) to filter on
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc set resources --help 
Specify compute resource requirements (cpu, memory) for any resource that defines a pod template. If a pod is successfully schedualed it is guaranteed the amount of resource requested, but may burst up to its specified limits. 

For each compute resource, if a limit is specified and a request is omitted, the request will default to the limit. 

Possible resources include (case insensitive): "ReplicationController", "Deployment", "DaemonSet", "Job", "ReplicaSet", "DeploymentConfigs"

Usage:
  oc set resources (-f FILENAME | TYPE NAME)  ([--limits=LIMITS & --requests=REQUESTS] [flags]

Examples:
  # Set a deployments nginx container cpu limits to "200m and memory to 512Mi"
  
  oc set resources deployment nginx -c=nginx --limits=cpu=200m,memory=512Mi
  
  
  # Set the resource request and limits for all containers in nginx
  
  oc set resources deployment nginx --limits=cpu=200m,memory=512Mi --requests=cpu=100m,memory=256Mi
  
  # Remove the resource requests for resources on containers in nginx
  
  oc set resources deployment nginx --limits=cpu=0,memory=0 --requests=cpu=0,memory=0
  
  # Print the result (in yaml format) of updating nginx container limits from a local, without hitting the server
  
  oc set resources -f path/to/file.yaml --limits=cpu=200m,memory=512Mi --local -o yaml

Options:
      --all=false: Select all resources, including uninitialized ones, in the namespace of the specified resource types
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
  -c, --containers='*': The names of containers in the selected pod templates to change, all containers are selected by default - may use wildcards
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to get from a server.
      --include-uninitialized=false: If true, the kubectl command applies to uninitialized objects. If explicitly set to false, this flag overrides other flags that make the kubectl commands apply to uninitialized objects, e.g., "--all". Objects with empty metadata.initializers are regarded as initialized.
      --limits='': The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.
      --local=false: If true, set resources will NOT contact api-server but run locally.
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --requests='': The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.
  -l, --selector='': Selector (label query) to filter on, not including uninitialized ones,supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc set volumes --help 
Update volumes on a pod template 

This command can add, update or remove volumes from containers for any object that has a pod template (deployment configs, replication controllers, or pods). You can list volumes in pod or any object that has a pod template. You can specify a single object or multiple, and alter volumes on all containers or just those that match a given name. 

If you alter a volume setting on a deployment config, a deployment will be triggered. Changing a replication controller will not affect running pods, and you cannot change a pod's volumes once it has been created. 

Volume types include: 

  * emptydir (empty directory) default : A directory allocated when the pod is created on a local host, is removed when the pod is deleted and is not copied across servers  
  * hostdir (host directory): A directory with specific path on any host (requires elevated privileges)  
  * persistentvolumeclaim or pvc (persistent volume claim): Link the volume directory in the container to a persistent volume claim you have allocated by name - a persistent volume claim is a request to allocate storage. Note that if your claim hasn't been bound, your pods will not start.  
  * secret (mounted secret): Secret volumes mount a named secret to the provided directory.  

For descriptions on other volume types, see https://docs.openshift.com

Aliases:
volumes, volume

Usage:
  oc set volumes RESOURCE/NAME --add|--remove|--list [flags]

Examples:
  # List volumes defined on all deployment configs in the current project
  oc set volume dc --all
  
  # Add a new empty dir volume to deployment config (dc) 'registry' mounted under
  # /var/lib/registry
  oc set volume dc/registry --add --mount-path=/var/lib/registry
  
  # Use an existing persistent volume claim (pvc) to overwrite an existing volume 'v1'
  oc set volume dc/registry --add --name=v1 -t pvc --claim-name=pvc1 --overwrite
  
  # Remove volume 'v1' from deployment config 'registry'
  oc set volume dc/registry --remove --name=v1
  
  # Create a new persistent volume claim that overwrites an existing volume 'v1'
  oc set volume dc/registry --add --name=v1 -t pvc --claim-size=1G --overwrite
  
  # Change the mount point for volume 'v1' to /data
  oc set volume dc/registry --add --name=v1 -m /data --overwrite
  
  # Modify the deployment config by removing volume mount "v1" from container "c1"
  # (and by removing the volume "v1" if no other containers have volume mounts that reference it)
  oc set volume dc/registry --remove --name=v1 --containers=c1
  
  # Add new volume based on a more complex volume source (Git repo, AWS EBS, GCE PD,
  # Ceph, Gluster, NFS, ISCSI, ...)
  oc set volume dc/registry --add -m /repo --source=<json-string>

Options:
      --add=false: If true, add volume and/or volume mounts for containers
      --all=false: If true, select all resources in the namespace of the specified resource types
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --claim-class='': StorageClass to use for the persistent volume claim
      --claim-mode='ReadWriteOnce': Set the access mode of the claim to be created. Valid values are ReadWriteOnce (rwo), ReadWriteMany (rwm), or ReadOnlyMany (rom)
      --claim-name='': Persistent volume claim name. Must be provided for persistentVolumeClaim volume type
      --claim-size='': If specified along with a persistent volume type, create a new claim with the given size in bytes. Accepts SI notation: 10, 10G, 10Gi
      --configmap-name='': Name of the persisted config map. Must be provided for configmap volume type
      --confirm=false: If true, confirm that you really want to remove multiple volumes
  -c, --containers='*': The names of containers in the selected pod templates to change - may use wildcards
      --default-mode='': The default mode bits to create files with. Can be between 0000 and 0777. Defaults to 0644.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -f, --filename=[]: Filename, directory, or URL to files to use to edit the resource
      --local=false: If true, set image will NOT contact api-server but run locally.
  -m, --mount-path='': Mount path inside the container. Optional param for --add or --remove
      --name='': Name of the volume. If empty, auto generated for add operation
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
      --overwrite=false: If true, replace existing volume source with the provided name and/or volume mount for the given resource
      --path='': Host path. Must be provided for hostPath volume type
      --read-only=false: Mount volume as ReadOnly. Optional param for --add or --remove
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --remove=false: If true, remove volume and/or volume mounts for containers
      --secret-name='': Name of the persisted secret. Must be provided for secret volume type
  -l, --selector='': Selector (label query) to filter on
      --source='': Details of volume source as json string. This can be used if the required volume type is not supported by --type option. (e.g.: '{"gitRepo": {"repository": <git-url>, "revision": <commit-hash>}}')
      --sub-path='': Path within the local volume from which the container's volume should be mounted. Optional param for --add or --remove
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
  -t, --type='': Type of the volume source for add operation. Supported options: emptyDir, hostPath, secret, configmap, persistentVolumeClaim

Use "oc options" for a list of global command-line options (applies to all commands).

>oc set probe --help 
Set or remove a liveness or readiness probe from a pod or pod template 

Each container in a pod may define one or more probes that are used for general health checking. A liveness probe is checked periodically to ensure the container is still healthy: if the probe fails, the container is restarted. Readiness probes set or clear the ready flag for each container, which controls whether the container's ports are included in the list of endpoints for a service and whether a deployment can proceed. A readiness check should indicate when your container is ready to accept incoming traffic or begin handling work. Setting both liveness and readiness probes for each container is highly recommended. 

The three probe types are: 

  1. Open a TCP socket on the pod IP  
  2. Perform an HTTP GET against a URL on a container that must return 200 OK  
  3. Run a command in the container that must return exit code 0  

Containers that take a variable amount of time to start should set generous initial-delay-seconds values, otherwise as your application evolves you may suddenly begin to fail.

Usage:
  oc set probe RESOURCE/NAME --readiness|--liveness [flags] (--get-url=URL|--open-tcp=PORT|-- CMD)

Examples:
  # Clear both readiness and liveness probes off all containers
  oc set probe dc/registry --remove --readiness --liveness
  
  # Set an exec action as a liveness probe to run 'echo ok'
  oc set probe dc/registry --liveness -- echo ok
  
  # Set a readiness probe to try to open a TCP socket on 3306
  oc set probe rc/mysql --readiness --open-tcp=3306
  
  # Set an HTTP readiness probe for port 8080 and path /healthz over HTTP on the pod IP
  oc set probe dc/webapp --readiness --get-url=http://:8080/healthz
  
  # Set an HTTP readiness probe over HTTPS on 127.0.0.1 for a hostNetwork pod
  oc set probe dc/router --readiness --get-url=https://127.0.0.1:1936/stats
  
  # Set only the initial-delay-seconds field on all deployments
  oc set probe dc --all --readiness --initial-delay-seconds=30

Options:
      --all=false: If true, select all resources in the namespace of the specified resource types
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
  -c, --containers='*': The names of containers in the selected pod templates to change - may use wildcards
      --dry-run=false: If true, only print the object that would be sent, without sending it.
      --failure-threshold=0: The number of failures before the probe is considered to have failed
  -f, --filename=[]: Filename, directory, or URL to files to use to edit the resource
      --get-url='': A URL to perform an HTTP GET on (you can omit the host, have a string port, or omit the scheme.
      --initial-delay-seconds=0: The time in seconds to wait before the probe begins checking
      --liveness=false: Set or remove a liveness probe to verify this container is running
      --local=false: If true, set image will NOT contact api-server but run locally.
      --open-tcp='': A port number or port name to attempt to open via TCP.
  -o, --output='': Output format. One of: json|yaml|name|templatefile|template|go-template|go-template-file|jsonpath|jsonpath-file.
      --period-seconds=0: The time in seconds between attempts
      --readiness=false: Set or remove a readiness probe to indicate when this container should receive traffic
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --remove=false: If true, remove the specified probe(s).
  -l, --selector='': Selector (label query) to filter on
      --success-threshold=0: The number of successes required before the probe is considered successful
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --timeout-seconds=0: The time in seconds to wait before considering the probe to have failed

Use "oc options" for a list of global command-line options (applies to all commands).

>oc set deployment-hook --help 
Set or remove a deployment hook on a deployment config 

Deployment configs allow hooks to execute at different points in the lifecycle of the deployment, depending on the deployment strategy. 

For deployments with a Recreate strategy, a Pre, Mid, and Post hook can be specified. The Pre hook will execute before the deployment starts. The Mid hook will execute once the previous deployment has been scaled down to 0, but before the new one ramps up. The Post hook will execute once the deployment has completed. 

For deployments with a Rolling strategy, a Pre and Post hook can be specified. The Pre hook will execute before the deployment starts and the Post hook will execute once the deployment has completed. 

For each hook, a new pod will be started using one of the containers in the deployment's pod template with a specific command to execute. Additional environment variables may be specified for the hook, as well as which volumes from the pod template will be mounted on the hook pod. 

Each hook can have its own cancellation policy. One of: abort, retry, or ignore. Not all cancellation policies can be set on all hooks. For example, a Post hook on a rolling strategy does not support the abort policy, because at that point the deployment has already happened.

Usage:
  oc set deployment-hook DEPLOYMENTCONFIG --pre|--post|--mid -- CMD [flags]

Examples:
  # Clear pre and post hooks on a deployment config
  oc set deployment-hook dc/myapp --remove --pre --post
  
  # Set the pre deployment hook to execute a db migration command for an application
  # using the data volume from the application
  oc set deployment-hook dc/myapp --pre --volumes=data -- /var/lib/migrate-db.sh
  
  # Set a mid deployment hook along with additional environment variables
  oc set deployment-hook dc/myapp --mid --volumes=data -e VAR1=value1 -e VAR2=value2 -- /var/lib/prepare-deploy.sh

Options:
      --all=false: If true, select all deployment configs in the namespace
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
  -c, --container='': The name of the container in the selected deployment config to use for the deployment hook
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -e, --environment=[]: Environment variable to use in the deployment hook pod
      --failure-policy='ignore': The failure policy for the deployment hook. Valid values are: abort,retry,ignore
  -f, --filename=[]: Filename, directory, or URL to files to use to edit the resource
      --local=false: If true, set deployment hook will NOT contact api-server but run locally.
      --mid=false: Set or remove a mid deployment hook
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
      --post=false: Set or remove a post deployment hook
      --pre=false: Set or remove a pre deployment hook
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --remove=false: If true, remove the specified deployment hook(s).
  -l, --selector='': Selector (label query) to filter deployment configs
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --volumes=[]: Volumes from the pod template to use in the deployment hook pod

Use "oc options" for a list of global command-line options (applies to all commands).

>oc set image --help 
Update existing container image(s) of resources.

Usage:
  oc set image (-f FILENAME | TYPE NAME) CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N [flags]

Examples:
  # Set a deployment configs's nginx container image to 'nginx:1.9.1', and its busybox container image to 'busybox'.
  oc set image dc/nginx busybox=busybox nginx=nginx:1.9.1
  
  # Set a deployment configs's app container image to the image referenced by the imagestream tag 'openshift/ruby:2.3'.
  oc set image dc/myapp app=openshift/ruby:2.3 --source=imagestreamtag
  
  # Update all deployments' and rc's nginx container's image to 'nginx:1.9.1'
  oc set image deployments,rc nginx=nginx:1.9.1 --all
  
  # Update image of all containers of daemonset abc to 'nginx:1.9.1'
  oc set image daemonset abc *=nginx:1.9.1
  
  # Print result (in yaml format) of updating nginx container image from local file, without hitting the server
  oc set image -f path/to/file.yaml nginx=nginx:1.9.1 --local -o yaml

Options:
      --all=false: Select all resources, including uninitialized ones, in the namespace of the specified resource types
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to get from a server.
      --include-uninitialized=false: If true, the kubectl command applies to uninitialized objects. If explicitly set to false, this flag overrides other flags that make the kubectl commands apply to uninitialized objects, e.g., "--all". Objects with empty metadata.initializers are regarded as initialized.
      --local=false: If true, set image will NOT contact api-server but run locally.
  -o, --output='': Output format. One of: json|yaml|name|go-template|go-template-file|templatefile|template|jsonpath|jsonpath-file.
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on, not including uninitialized ones, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --source='docker': The image source type; valid types are 'imagestreamtag', 'istag', 'imagestreamimage', 'isimage', and 'docker'
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc set build-secret --help 
Set or remove a build secret on a build config 

A build config can reference a secret to push or pull images from private registries or to access private source repositories. 

Specify the type of secret being set by using the --push, --pull, or --source flags. A secret reference can be removed by using --remove flag. 

A label selector may be specified with the --selector flag to select the build configs on which to set or remove secrets. Alternatively, all build configs in the namespace can be selected with the --all flag.

Usage:
  oc set build-secret BUILDCONFIG SECRETNAME [flags]

Examples:
  # Clear push secret on a build config
  oc set build-secret --push --remove bc/mybuild
  
  # Set the pull secret on a build config
  oc set build-secret --pull bc/mybuild mysecret
  
  # Set the push and pull secret on a build config
  oc set build-secret --push --pull bc/mybuild mysecret
  
  # Set the source secret on a set of build configs matching a selector
  oc set build-secret --source -l app=myapp gitsecret

Options:
      --all=false: If true, select all build configs in the namespace
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -f, --filename=[]: Filename, directory, or URL to files to use to edit the resource
      --local=false: If true, set build-secret will NOT contact api-server but run locally.
  -o, --output='': Output format. One of: json|yaml|name|go-template-file|templatefile|template|go-template|jsonpath|jsonpath-file.
      --pull=false: If true, set the pull secret on a build config
      --push=false: If true, set the push secret on a build config
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --remove=false: If true, remove the build secret.
  -l, --selector='': Selector (label query) to filter build configs
      --source=false: If true, set the source secret on a build config
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc set image-lookup --help 
Use an image stream from pods and other objects 

Image streams make it easy to tag images, track changes from other registries, and centralize access control to images. Local name lookup allows an image stream to be the source of images for pods, deployments, replica sets, and other resources that reference images, without having to provide the full registry URL. If local name lookup is enabled for an image stream named 'mysql', a pod or other resource that references 'mysql:latest' (or any other tag) will pull from the location specified by the image stream tag, not from an upstream registry. 

Once lookup is enabled, simply reference the image stream tag in the image field of the object. For example: 

      $ oc import-image mysql:latest --confirm
      $ oc set image-lookup mysql
      $ oc run mysql --image=mysql
  
will import the latest MySQL image from the DockerHub, set that image stream to handle the "mysql" name within the project, and then launch a deployment that points to the image we imported. 

You may also force image lookup for all of the images on a resource with this command. An annotation is placed on the object which forces an image stream tag lookup in the current namespace for any image that matches, regardless of whether the image stream has lookup enabled. 

      $ oc run mysql --image=myregistry:5000/test/mysql:v1
      $ oc tag --source=docker myregistry:5000/test/mysql:v1 mysql:v1
      $ oc set image-lookup deploy/mysql
  
Which should trigger a deployment pointing to the imported mysql:v1 tag. 

Experimental: This feature is under active development and may change without notice.

Usage:
  oc set image-lookup STREAMNAME [...] [flags]

Examples:
  # Print all of the image streams and whether they resolve local names
  oc set image-lookup
  
  # Use local name lookup on image stream mysql
  oc set image-lookup mysql
  
  # Force a deployment to use local name lookup
  oc set image-lookup deploy/mysql
  
  # Show the current status of the deployment lookup
  oc set image-lookup deploy/mysql --list
  
  # Disable local name lookup on image stream mysql
  oc set image-lookup mysql --enabled=false
  
  # Set local name lookup on all image streams
  oc set image-lookup --all

Options:
      --all=false: If true, select all resources in the namespace of the specified resource types.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
      --enabled=true: Mark the image stream as resolving tagged images in this namespace.
  -f, --filename=[]: Filename, directory, or URL to files to use to edit the resource
      --list=false: Display the current states of the requested resources.
      --local=false: If true, operations will be performed locally.
  -o, --output='': Output format. One of: json|yaml|name|go-template-file|templatefile|template|go-template|jsonpath|jsonpath-file.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc set triggers --help 
Set or remove triggers 

Build configs, deployment configs, and most Kubernetes workload objects may have a set of triggers that result in a new deployment or build being created when an image changes. This command enables you to alter those triggers - making them automatic or manual, adding new entries, or changing existing entries. 

Deployments support triggering off of image changes and on config changes. Config changes are any alterations to the pod template, while image changes will result in the container image value being updated whenever an image stream tag is updated. You may also trigger Kubernetes stateful sets, daemon sets, deployments, and cron jobs from images. Disabling the config change trigger is equivalent to pausing most objects. Deployment configs will not perform their first deployment until all image change triggers have been submitted. 

Build configs support triggering off of image changes, config changes, and webhooks. The config change trigger for a build config will only trigger the first build.

Usage:
  oc set triggers RESOURCE/NAME [--from-config|--from-image|--from-github|--from-webhook] [--auto|--manual] [flags]

Examples:
  # Print the triggers on the registry
  oc set triggers dc/registry
  
  # Set all triggers to manual
  oc set triggers dc/registry --manual
  
  # Enable all automatic triggers
  oc set triggers dc/registry --auto
  
  # Reset the GitHub webhook on a build to a new, generated secret
  oc set triggers bc/webapp --from-github
  oc set triggers bc/webapp --from-webhook
  
  # Remove all triggers
  oc set triggers bc/webapp --remove-all
  
  # Stop triggering on config change
  oc set triggers dc/registry --from-config --remove
  
  # Add an image trigger to a build config
  oc set triggers bc/webapp --from-image=namespace1/image:latest
  
  # Add an image trigger to a stateful set on the main container
  oc set triggers statefulset/db --from-image=namespace1/image:latest -c main

Options:
      --all=false: If true, select all resources in the namespace of the specified resource types
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --auto=false: If true, enable all triggers, or just the specified trigger
  -c, --containers='': Comma delimited list of container names this trigger applies to on deployments; defaults to the name of the only container
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -f, --filename=[]: Filename, directory, or URL to files to use to edit the resource
      --from-bitbucket=false: If true, a Bitbucket webhook - a secret value will be generated automatically
      --from-config=false: If set, configuration changes will result in a change
      --from-github=false: If true, a GitHub webhook - a secret value will be generated automatically
      --from-gitlab=false: If true, a GitLab webhook - a secret value will be generated automatically
      --from-image='': An image stream tag to trigger off of
      --from-webhook=false: If true, a generic webhook - a secret value will be generated automatically
      --from-webhook-allow-env=false: If true, a generic webhook which can provide environment variables - a secret value will be generated automatically
      --local=false: If true, set image will NOT contact api-server but run locally.
      --manual=false: If true, set all triggers to manual, or just the specified trigger
  -o, --output='': Output format. One of: json|yaml|name|templatefile|template|go-template|go-template-file|jsonpath|jsonpath-file.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --remove=false: If true, remove the specified trigger(s).
      --remove-all=false: If true, remove all triggers.
  -l, --selector='': Selector (label query) to filter on
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc set build-hook --help 
Set or remove a build hook on a build config 

Build hooks allow behavior to be injected into the build process. 

A post-commit build hook is executed after a build has committed an image but before the image has been pushed to a registry. It can be used to execute tests on the image and verify it before it is made available in a registry or for any other logic that is needed to execute before the image is pushed to the registry. A new container with the recently built image is launched with the build hook command. If the command or script run by the build hook returns a non-zero exit code, the resulting image will not be pushed to the registry. 

The command for a build hook may be specified as a shell script (with the --script argument), as a new entrypoint command on the image with the --command argument, or as a set of arguments to the image's entrypoint (default).

Usage:
  oc set build-hook BUILDCONFIG --post-commit [--command] [--script] -- CMD [flags]

Examples:
  # Clear post-commit hook on a build config
  oc set build-hook bc/mybuild --post-commit --remove
  
  # Set the post-commit hook to execute a test suite using a new entrypoint
  oc set build-hook bc/mybuild --post-commit --command -- /bin/bash -c /var/lib/test-image.sh
  
  # Set the post-commit hook to execute a shell script
  oc set build-hook bc/mybuild --post-commit --script="/var/lib/test-image.sh param1 param2 && /var/lib/done.sh"
  
  # Set the post-commit hook as a set of arguments to the default image entrypoint
  oc set build-hook bc/mybuild --post-commit  -- arg1 arg2

Options:
      --all=false: If true, select all build configs in the namespace
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --command=false: If true, set the entrypoint of the hook container to the given command
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -f, --filename=[]: Filename, directory, or URL to files to use to edit the resource
      --local=false: If true, set image will NOT contact api-server but run locally.
  -o, --output='': Output format. One of: json|yaml|name|templatefile|template|go-template|go-template-file|jsonpath|jsonpath-file.
      --post-commit=false: If true, set the post-commit build hook on a build config
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --remove=false: If true, remove the build hook.
      --script='': Specify a script to run for the build-hook
  -l, --selector='': Selector (label query) to filter build configs
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc set route-backends --help 
Set and adjust route backends 

Routes may have one or more optional backend services with weights controlling how much traffic flows to each service. Traffic is assigned proportional to the combined weights of each backend. A weight of zero means that the backend will receive no traffic. If all weights are zero the route will not send traffic to any backends. 

When setting backends, the first backend is the primary and the other backends are considered alternates. For example: 

  $ oc set route-backends web prod=99 canary=1
  
will set the primary backend to service "prod" with a weight of 99 and the first alternate backend to service "canary" with a weight of 1. This means 99% of traffic will be sent to the service "prod". 

The --adjust flag allows you to alter the weight of an individual service relative to itself or to the primary backend. Specifying a percentage will adjust the backend relative to either the primary or the first alternate (if you specify the primary). If there are other backends their weights will be kept proportional to the changed. 

Not all routers may support multiple or weighted backends.

Usage:
  oc set route-backends ROUTENAME [--zero|--equal] [--adjust] SERVICE=WEIGHT[%] [...] [flags]

Examples:
  # Print the backends on the route 'web'
  oc set route-backends web
  
  # Set two backend services on route 'web' with 2/3rds of traffic going to 'a'
  oc set route-backends web a=2 b=1
  
  # Increase the traffic percentage going to b by 10% relative to a
  oc set route-backends web --adjust b=+10%
  
  # Set traffic percentage going to b to 10% of the traffic going to a
  oc set route-backends web --adjust b=10%
  
  # Set weight of b to 10
  oc set route-backends web --adjust b=10
  
  # Set the weight to all backends to zero
  oc set route-backends web --zero

Options:
      --adjust=false: Adjust a single backend using an absolute or relative weight. If the primary backend is selected and there is more than one alternate an error will be returned.
      --all=false: If true, select all resources in the namespace of the specified resource types
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
      --equal=false: If true, set the weight of all backends to 100.
  -f, --filename=[]: Filename, directory, or URL to files to use to edit the resource
      --local=false: If true, set image will NOT contact api-server but run locally.
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --zero=false: If true, set the weight of all backends to zero.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help label 
Update the labels on one or more resources 

A valid label value is consisted of letters and/or numbers with a max length of  63 characters. If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will result in an error. If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used.

Usage:
  oc label [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version] [flags]

Examples:
  # Update pod 'foo' with the label 'unhealthy' and the value 'true'.
  oc label pods foo unhealthy=true
  
  # Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value.
  oc label --overwrite pods foo status=unhealthy
  
  # Update all pods in the namespace
  oc label pods --all status=unhealthy
  
  # Update pod 'foo' only if the resource is unchanged from version 1.
  oc label pods foo status=unhealthy --resource-version=1
  
  # Update pod 'foo' by removing a label named 'bar' if it exists.
  # Does not require the --overwrite flag.
  oc label pods foo bar-

Options:
      --all=false: Select all resources, including uninitialized ones, in the namespace of the specified resource types
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to update the labels
      --include-uninitialized=false: If true, the kubectl command applies to uninitialized objects. If explicitly set to false, this flag overrides other flags that make the kubectl commands apply to uninitialized objects, e.g., "--all". Objects with empty metadata.initializers are regarded as initialized.
      --list=false: If true, display the labels for a given resource.
      --local=false: If true, label will NOT contact api-server but run locally.
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
      --overwrite=false: If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing labels.
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --resource-version='': If non-empty, the labels update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.
  -l, --selector='': Selector (label query) to filter on, not including uninitialized ones, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2).
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help annotate 
Update the annotations on one or more resources 

An annotation is a key/value pair that can hold larger (compared to a label), and possibly not human-readable, data. It is intended to store non-identifying auxiliary data, especially data manipulated by tools and system extensions. If --overwrite is true, then existing annotations can be overwritten, otherwise attempting to overwrite an annotation will result in an error. If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used. 

Run 'oc types' for a list of valid resources.

Usage:
  oc annotate [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version] [flags]

Examples:
  # Update pod 'foo' with the annotation 'description' and the value 'my frontend'.
  # If the same annotation is set multiple times, only the last value will be applied
  oc annotate pods foo description='my frontend'
  
  # Update pod 'foo' with the annotation 'description' and the value
  # 'my frontend running nginx', overwriting any existing value.
  oc annotate --overwrite pods foo description='my frontend running nginx'
  
  # Update all pods in the namespace
  oc annotate pods --all description='my frontend running nginx'
  
  # Update pod 'foo' only if the resource is unchanged from version 1.
  oc annotate pods foo description='my frontend running nginx' --resource-version=1
  
  # Update pod 'foo' by removing an annotation named 'description' if it exists.
  # Does not require the --overwrite flag.
  oc annotate pods foo description-

Options:
      --all=false: Select all resources, including uninitialized ones, in the namespace of the specified resource types.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to update the annotation
      --include-uninitialized=false: If true, the kubectl command applies to uninitialized objects. If explicitly set to false, this flag overrides other flags that make the kubectl commands apply to uninitialized objects, e.g., "--all". Objects with empty metadata.initializers are regarded as initialized.
      --local=false: If true, annotation will NOT contact api-server but run locally.
  -o, --output='': Output format. One of: json|yaml|name|templatefile|template|go-template|go-template-file|jsonpath|jsonpath-file.
      --overwrite=false: If true, allow annotations to be overwritten, otherwise reject annotation updates that overwrite existing annotations.
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --resource-version='': If non-empty, the annotation update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.
  -l, --selector='': Selector (label query) to filter on, not including uninitialized ones, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2).
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help expose 
Expose containers internally as services or externally via routes 

There is also the ability to expose a deployment configuration, replication controller, service, or pod as a new service on a specified port. If no labels are specified, the new object will re-use the labels from the object it exposes.

Usage:
  oc expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP] [--target-port=number-or-name] [--name=name] [--external-ip=external-ip-of-service] [--type=type] [flags]

Examples:
  # Create a route based on service nginx. The new route will re-use nginx's labels
  oc expose service nginx
  
  # Create a route and specify your own label and route name
  oc expose service nginx -l name=myroute --name=fromdowntown
  
  # Create a route and specify a hostname
  oc expose service nginx --hostname=www.example.com
  
  # Create a route with wildcard
  oc expose service nginx --hostname=x.example.com --wildcard-policy=Subdomain
  This would be equivalent to *.example.com. NOTE: only hosts are matched by the wildcard, subdomains would not be included.
  
  # Expose a deployment configuration as a service and use the specified port
  oc expose dc ruby-hello-world --port=8080
  
  # Expose a service as a route in the specified path
  oc expose service nginx --path=/nginx
  
  # Expose a service using different generators
  oc expose service nginx --name=exposed-svc --port=12201 --protocol="TCP" --generator="service/v2"
  oc expose service nginx --name=my-route --port=12201 --generator="route/v1"
  
  Exposing a service using the "route/v1" generator (default) will create a new exposed route with the "--name" provided
  (or the name of the service otherwise). You may not specify a "--protocol" or "--target-port" option when using this generator.

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --cluster-ip='': ClusterIP to be assigned to the service. Leave empty to auto-allocate, or set to 'None' to create a headless service.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
      --external-ip='': Additional external IP address (not managed by Kubernetes) to accept for the service. If this IP is routed to a node, the service can be accessed by this IP in addition to its generated service IP.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to expose a service
      --generator='': The name of the API generator to use. Defaults to "route/v1". Available generators include "service/v1", "service/v2", and "route/v1". "service/v1" will automatically name the port "default", while "service/v2" will leave it unnamed.
      --hostname='': Set a hostname for the new route
  -l, --labels='': Labels to apply to the service created by this call.
      --load-balancer-ip='': IP to assign to the LoadBalancer. If empty, an ephemeral IP will be created and used (cloud-provider specific).
      --name='': The name for the newly created object.
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
      --overrides='': An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.
      --path='': Set a path for the new route
      --port='': The port that the resource should serve on.
      --protocol='': The network protocol for the service to be created. Default is 'TCP'.
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --save-config=false: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
      --selector='': A label selector to use for this service. Only equality-based selector requirements are supported. If empty (the default) infer the selector from the replication controller or replica set.)
      --session-affinity='': If non-empty, set the session affinity for the service to this; legal values: 'None', 'ClientIP'
      --target-port='': Name or number for the port on the container that the service should direct traffic to. Optional.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --type='': Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is 'ClusterIP'.
      --wildcard-policy='': Sets the WildcardPolicy for the hostname, the default is "None". Valid values are "None" and "Subdomain"

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help delete 
Delete a resource 

JSON and YAML formats are accepted. 

If both a filename and command line arguments are passed, the command line arguments are used and the filename is ignored. 

Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.

Usage:
  oc delete ([-f FILENAME] | TYPE [(NAME | -l label | --all)]) [flags]

Examples:
  # Delete a pod using the type and ID specified in pod.json.
  oc delete -f pod.json
  
  # Delete a pod based on the type and ID in the JSON passed into stdin.
  cat pod.json | oc delete -f -
  
  # Delete pods and services with label name=myLabel.
  oc delete pods,services -l name=myLabel
  
  # Delete a pod with name node-1-vsjnm.
  oc delete pod node-1-vsjnm
  
  # Delete all resources associated with a running app, includes
  # buildconfig,deploymentconfig,service,imagestream,route and pod,
  # where 'appName' is listed in 'Labels' of 'oc describe [resource] [resource name]' output.
  oc delete all -l app=appName
  
  # Delete all pods
  oc delete pods --all

Options:
      --all=false: Delete all resources, including uninitialized ones, in the namespace of the specified resource types.
      --cascade=true: If true, cascade the deletion of the resources managed by this resource (e.g. Pods created by a ReplicationController).  Default true.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: containing the resource to delete.
      --force=false: Only used when grace-period=0. If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.
      --grace-period=-1: Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).
      --ignore-not-found=false: Treat "resource not found" as a successful delete. Defaults to "true" when --all is specified.
      --include-uninitialized=false: If true, the kubectl command applies to uninitialized objects. If explicitly set to false, this flag overrides other flags that make the kubectl commands apply to uninitialized objects, e.g., "--all". Objects with empty metadata.initializers are regarded as initialized.
      --now=false: If true, resources are signaled for immediate shutdown (same as --grace-period=1).
  -o, --output='': Output mode. Use "-o name" for shorter output (resource/name).
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on, not including uninitialized ones.
      --timeout=0s: The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object
      --wait=true: If true, wait for resources to be gone before returning. This waits for finalizers.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help scale 
Set a new size for a deployment or replication controller 

Scale also allows users to specify one or more preconditions for the scale action. If --current-replicas or --resource-version is specified, it is validated before the scale is attempted, and it is guaranteed that the precondition holds true when the scale is sent to the server. 

Note that scaling a deployment configuration with no deployments will update the desired replicas in the configuration template. 

Supported resources: ["deployment" "replicaset" "replicationcontroller" "statefulset" "deploymentconfig"]

Usage:
  oc scale [--resource-version=version] [--current-replicas=count] --replicas=COUNT (-f FILENAME | TYPE NAME) [flags]

Examples:
  # Scale replication controller named 'foo' to 3.
  oc scale --replicas=3 replicationcontrollers foo
  
  # If the replication controller named foo's current size is 2, scale foo to 3.
  oc scale --current-replicas=2 --replicas=3 replicationcontrollers foo
  
  # Scale the latest deployment of 'bar'. In case of no deployment, bar's template
  # will be scaled instead.
  oc scale --replicas=10 dc bar

Options:
      --all=false: Select all resources in the namespace of the specified resource types
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --current-replicas=-1: Precondition for current size. Requires that the current size of the resource match this value in order to scale.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to set a new size
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --replicas=0: The new desired number of replicas. Required.
      --resource-version='': Precondition for resource version. Requires that the current resource version match this value in order to scale.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --timeout=0s: The length of time to wait before giving up on a scale operation, zero means don't wait. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help autoscale 
Autoscale a deployment config or replication controller. 

Looks up a deployment config or replication controller by name and creates an autoscaler that uses this deployment config or replication controller as a reference. An autoscaler can automatically increase or decrease number of pods deployed within the system as needed.

Usage:
  oc autoscale (-f FILENAME | TYPE NAME | TYPE/NAME) [--min=MINPODS] --max=MAXPODS [--cpu-percent=CPU] [flags]

Examples:
  # Auto scale a deployment config "foo", with the number of pods between 2 to
  # 10, target CPU utilization at a default value that server applies:
  oc autoscale dc/foo --min=2 --max=10
  
  # Auto scale a replication controller "foo", with the number of pods between
  # 1 to 5, target CPU utilization at 80%
  oc autoscale rc/foo --max=5 --cpu-percent=80

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --cpu-percent=-1: The target average CPU utilization (represented as a percent of requested CPU) over all the pods. If it's not specified or negative, a default autoscaling policy will be used.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to autoscale.
      --generator='horizontalpodautoscaler/v1': The name of the API generator to use. Currently there is only 1 generator.
      --max=-1: The upper limit for the number of pods that can be set by the autoscaler. Required.
      --min=-1: The lower limit for the number of pods that can be set by the autoscaler. If it's not specified or negative, the server will apply a default value.
      --name='': The name for the newly created object. If not specified, the name of the input resource will be used.
  -o, --output='': Output format. One of: json|yaml|name|go-template|go-template-file|templatefile|template|jsonpath|jsonpath-file.
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --save-config=false: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help secrets 
Manage secrets in your project 

Secrets are used to store confidential information that should not be contained inside of an image. They are commonly used to hold things like keys for authentication to other internal systems like Docker registries.

Aliases:
secrets, secret

Usage:
  oc secrets [flags]

Available Commands:
  add           DEPRECATED: secrets link
  link          Link secrets to a ServiceAccount
  unlink        Detach secrets from a ServiceAccount

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc help serviceaccounts 
Manage service accounts in your project 

Service accounts allow system components to access the API.

Aliases:
serviceaccounts, sa

Usage:
  oc serviceaccounts [flags]

Available Commands:
  create-kubeconfig Generate a kubeconfig file for a service account
  get-token         Get a token assigned to a service account.
  new-token         Generate a new token for a service account.

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc help logs 
Print the logs for a resource 

Supported resources are builds, build configs (bc), deployment configs (dc), and pods. When a pod is specified and has more than one container, the container name should be specified via -c. When a build config or deployment config is specified, you can view the logs for a particular version of it via --version. 

If your pod is failing to start, you may need to use the --previous option to see the logs of the last attempt.

Aliases:
logs, log

Usage:
  oc logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER] [flags]

Examples:
  # Start streaming the logs of the most recent build of the openldap build config.
  oc logs -f bc/openldap
  
  # Start streaming the logs of the latest deployment of the mysql deployment config.
  oc logs -f dc/mysql
  
  # Get the logs of the first deployment for the mysql deployment config. Note that logs
  # from older deployments may not exist either because the deployment was successful
  # or due to deployment pruning or manual deletion of the deployment.
  oc logs --version=1 dc/mysql
  
  # Return a snapshot of ruby-container logs from pod backend.
  oc logs backend -c ruby-container
  
  # Start streaming of ruby-container logs from pod backend.
  oc logs -f pod/backend -c ruby-container

Options:
      --all-containers=false: Get all containers's logs in the pod(s).
  -c, --container='': Print the logs of this container
  -f, --follow=false: Specify if the logs should be streamed.
      --limit-bytes=0: Maximum bytes of logs to return. Defaults to no limit.
      --pod-running-timeout=20s: The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running
  -p, --previous=false: If true, print the logs for the previous instance of the container in a pod if it exists.
  -l, --selector='': Selector (label query) to filter on.
      --since=0s: Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.
      --since-time='': Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.
      --tail=-1: Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided.
      --timestamps=false: Include timestamps on each line in the log output
      --version=0: View the logs of a particular build or deployment by version if greater than zero

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help rsh 
Open a remote shell session to a container 

This command will attempt to start a shell session in a pod for the specified resource. It works with pods, deployment configs, deployments, jobs, daemon sets, replication controllers and replica sets. Any of the aforementioned resources (apart from pods) will be resolved to a ready pod. It will default to the first container if none is specified, and will attempt to use '/bin/sh' as the default shell. You may pass any flags supported by this command before the resource name, and an optional command after the resource name, which will be executed instead of a login shell. A TTY will be automatically allocated if standard input is interactive - use -t and -T to override. A TERM variable is sent to the environment where the shell (or command) will be executed. By default its value is the same as the TERM variable from the local environment; if not set, 'xterm' is used. 

Note, some containers may not include a shell - use 'oc exec' if you need to run commands directly.

Usage:
  oc rsh [flags] POD [COMMAND]

Examples:
  # Open a shell session on the first container in pod 'foo'
  oc rsh foo
  
  # Run the command 'cat /etc/resolv.conf' inside pod 'foo'
  oc rsh foo cat /etc/resolv.conf
  
  # See the configuration of your internal registry
  oc rsh dc/docker-registry cat config.yml
  
  # Open a shell session on the container named 'index' inside a pod of your job
  # oc rsh -c index job/sheduled

Options:
  -c, --container='': Container name; defaults to first container
  -T, --no-tty=false: Disable pseudo-terminal allocation
      --shell='/bin/sh': Path to the shell command
      --timeout=10: Request timeout for obtaining a pod from the server; defaults to 10 seconds
  -t, --tty=false: Force a pseudo-terminal to be allocated

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help rsync 
Copy local files to or from a pod container 

This command will copy local files to or from a remote container. It only copies the changed files using the rsync command from your OS. To ensure optimum performance, install rsync locally. In UNIX systems, use your package manager. In Windows, install cwRsync from https://www.itefix.net/cwrsync. 

If no container is specified, the first container of the pod is used for the copy. 

The following flags are passed to rsync by default: --archive --no-owner --no-group --omit-dir-times --numeric-ids

Usage:
  oc rsync SOURCE DESTINATION [flags]

Examples:
  # Synchronize a local directory with a pod directory
  oc rsync ./local/dir/ POD:/remote/dir
  
  # Synchronize a pod directory with a local directory
  oc rsync POD:/remote/dir/ ./local/dir

Options:
      --compress=false: compress file data during the transfer
  -c, --container='': Container within the pod
      --delete=false: If true, delete files not present in source
      --exclude=[]: If true, exclude files matching specified pattern
      --include=[]: If true, include files matching specified pattern
      --no-perms=false: If true, do not transfer permissions
      --progress=false: If true, show progress during transfer
  -q, --quiet=false: Suppress non-error messages
      --strategy='': Specify which strategy to use for copy: rsync, rsync-daemon, or tar
  -w, --watch=false: Watch directory for changes and resync automatically

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help port-forward 
Forward 1 or more local ports to a pod

Usage:
  oc port-forward TYPE/NAME [LOCAL_PORT:]REMOTE_PORT [...[LOCAL_PORT_N:]REMOTE_PORT_N] [flags]

Examples:
  # Listens on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod
  oc port-forward mypod 5000 6000
  
  # Listens on port 8888 locally, forwarding to 5000 in the pod
  oc port-forward mypod 8888:5000
  
  # Listens on a random port locally, forwarding to 5000 in the pod
  oc port-forward mypod :5000
  
  # Listens on a random port locally, forwarding to 5000 in the pod
  oc port-forward mypod 0:5000

Options:
      --pod-running-timeout=1m0s: The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help debug 
Launch a command shell to debug a running application 

When debugging images and setup problems, it's useful to get an exact copy of a running pod configuration and troubleshoot with a shell. Since a pod that is failing may not be started and not accessible to 'rsh' or 'exec', the 'debug' command makes it easy to create a carbon copy of that setup. 

The default mode is to start a shell inside of the first container of the referenced pod, replication controller, or deployment config. The started pod will be a copy of your source pod, with labels stripped, the command changed to '/bin/sh', and readiness and liveness checks disabled. If you just want to run a command, add '--' and a command to run. Passing a command will not create a TTY or send STDIN by default. Other flags are supported for altering the container or pod in common ways. 

A common problem running containers is a security policy that prohibits you from running as a root user on the cluster. You can use this command to test running a pod as non-root (with --as-user) or to run a non-root pod as root (with --as-root). 

The debug pod is deleted when the the remote command completes or the user interrupts the shell.

Usage:
  oc debug RESOURCE/NAME [ENV1=VAL1 ...] [-c CONTAINER] [flags] [-- COMMAND]

Examples:
  # Debug a currently running deployment
  oc debug dc/test
  
  # Test running a deployment as a non-root user
  oc debug dc/test --as-user=1000000
  
  # Debug a specific failing container by running the env command in the 'second' container
  oc debug dc/test -c second -- /bin/env
  
  # See the pod that would be created to debug
  oc debug dc/test -o yaml

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --as-root=false: If true, try to run the container as the root user
      --as-user=-1: Try to run the container as a specific user UID (note: admins may limit your ability to use this flag)
  -c, --container='': Container name; defaults to first container
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -f, --filename=[]: Filename, directory, or URL to files to read a template
      --keep-annotations=false: If true, keep the original pod annotations
      --keep-init-containers=true: Run the init containers for the pod. Defaults to true.
      --keep-liveness=false: If true, keep the original pod liveness probes
      --keep-readiness=false: If true, keep the original pod readiness probes
  -I, --no-stdin=false: Bypasses passing STDIN to the container, defaults to true if no command specified
  -T, --no-tty=false: Disable pseudo-terminal allocation
      --node-name='': Set a specific node to run on - by default the pod will run on any valid node
      --one-container=false: If true, run only the selected container, remove all others
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
  -t, --tty=false: Force a pseudo-terminal to be allocated

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help exec 
Execute a command in a container

Usage:
  oc exec [flags] POD [-c CONTAINER] -- COMMAND [args...]

Examples:
  # Get output from running 'date' in ruby-container from pod 'mypod'
  oc exec mypod -c ruby-container date
  
  # Switch to raw terminal mode, sends stdin to 'bash' in ruby-container from pod 'mypod' and sends stdout/stderr from 'bash' back to the client
  oc exec mypod -c ruby-container -i -t -- bash -il

Options:
  -c, --container='': Container name. If omitted, the first container in the pod will be chosen
  -p, --pod='': Pod name (deprecated)
  -i, --stdin=false: Pass stdin to the container
  -t, --tty=false: Stdin is a TTY

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help proxy 
Run a proxy to the API server

Usage:
  oc proxy [--port=PORT] [--www=static-dir] [--www-prefix=prefix] [--api-prefix=prefix] [flags]

Examples:
  # Run a proxy to the api server on port 8011, serving static content from ./local/www/
  oc proxy --port=8011 --www=./local/www/
  
  # Run a proxy to the api server on an arbitrary local port.
  # The chosen port for the server will be output to stdout.
  oc proxy --port=0
  
  # Run a proxy to the api server, changing the api prefix to my-api
  # This makes e.g. the pods api available at localhost:8011/my-api/api/v1/pods/
  oc proxy --api-prefix=/my-api

Options:
      --accept-hosts='^localhost$,^127\.0\.0\.1$,^\[::1\]$': Regular expression for hosts that the proxy should accept.
      --accept-paths='^.*': Regular expression for paths that the proxy should accept.
      --address='127.0.0.1': The IP address on which to serve on.
      --api-prefix='/': Prefix to serve the proxied API under.
      --disable-filter=false: If true, disable request filtering in the proxy. This is dangerous, and can leave you vulnerable to XSRF attacks, when used with an accessible port.
  -p, --port=8001: The port on which to run the proxy. Set to 0 to pick a random port.
      --reject-methods='^$': Regular expression for HTTP methods that the proxy should reject (example --reject-methods='POST,PUT,PATCH'). 
      --reject-paths='^/api/.*/pods/.*/exec,^/api/.*/pods/.*/attach': Regular expression for paths that the proxy should reject. Paths specified here will be rejected even accepted by --accept-paths.
  -u, --unix-socket='': Unix socket on which to run the proxy.
  -w, --www='': Also serve static files from the given directory under the specified prefix.
  -P, --www-prefix='/static/': Prefix to serve static files under, if static file directory is specified.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help attach 
Attach to a running container 

Attach the current shell to a remote container, returning output or setting up a full terminal session. Can be used to debug containers and invoke interactive commands.

Usage:
  oc attach (POD | TYPE/NAME) -c CONTAINER [flags]

Examples:
  # Get output from running pod 123456-7890, using the first container by default
  oc attach 123456-7890
  
  # Get output from ruby-container from pod 123456-7890
  oc attach 123456-7890 -c ruby-container
  
  # Switch to raw terminal mode, sends stdin to 'bash' in ruby-container from pod 123456-780
  # and sends stdout/stderr from 'bash' back to the client
  oc attach 123456-7890 -c ruby-container -i -t

Options:
  -c, --container='': Container name. If omitted, the first container in the pod will be chosen
      --pod-running-timeout=1m0s: The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running
  -i, --stdin=false: Pass stdin to the container
  -t, --tty=false: Stdin is a TTY

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help run 
Create and run a particular image, possibly replicated 

Creates a deployment config to manage the created container(s). You can choose to run in the foreground for an interactive container execution.  You may pass 'run/v1' to --generator to create a replication controller instead of a deployment config.

Usage:
  oc run NAME --image=image [--env="key=value"] [--port=port] [--replicas=replicas] [--dry-run=bool] [--overrides=inline-json] [--command] -- [COMMAND] [args...] [flags]

Examples:
  # Start a single instance of nginx.
  oc run nginx --image=nginx
  
  # Start a single instance of hazelcast and let the container expose port 5701 .
  oc run hazelcast --image=hazelcast --port=5701
  
  # Start a single instance of hazelcast and set environment variables "DNS_DOMAIN=cluster"
  # and "POD_NAMESPACE=default" in the container.
  oc run hazelcast --image=hazelcast --env="DNS_DOMAIN=cluster" --env="POD_NAMESPACE=default"
  
  # Start a replicated instance of nginx.
  oc run nginx --image=nginx --replicas=5
  
  # Dry run. Print the corresponding API objects without creating them.
  oc run nginx --image=nginx --dry-run
  
  # Start a single instance of nginx, but overload the spec of the deployment config with
  # a partial set of values parsed from JSON.
  oc run nginx --image=nginx --overrides='{ "apiVersion": "v1", "spec": { ... } }'
  
  # Start a pod of busybox and keep it in the foreground, don't restart it if it exits.
  oc run -i -t busybox --image=busybox --restart=Never
  
  # Start the nginx container using the default command, but use custom arguments (arg1 .. argN)
  # for that command.
  oc run nginx --image=nginx -- <arg1> <arg2> ... <argN>
  
  # Start the nginx container using a different command and custom arguments.
  oc run nginx --image=nginx --command -- <cmd> <arg1> ... <argN>
  
  # Start the job to compute π to 2000 places and print it out.
  oc run pi --image=perl --restart=OnFailure -- perl -Mbignum=bpi -wle 'print bpi(2000)'
  
  # Start the cron job to compute π to 2000 places and print it out every 5 minutes.
  oc run pi --schedule="0/5 * * * ?" --image=perl --restart=OnFailure -- perl -Mbignum=bpi -wle 'print bpi(2000)'

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --attach=false: If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.
      --cascade=true: If true, cascade the deletion of the resources managed by this resource (e.g. Pods created by a ReplicationController).  Default true.
      --command=false: If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
      --env=[]: Environment variables to set in the container
      --expose=false: If true, a public, external service is created for the container(s) which are run
  -f, --filename=[]: to use to replace the resource.
      --force=false: Only used when grace-period=0. If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.
      --generator='': The name of the API generator to use.  Default is 'deploymentconfig/v1' if --restart=Always, otherwise the default is 'run-pod/v1'.
      --grace-period=-1: Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).
      --hostport=-1: The host port mapping for the container port. To demonstrate a single-machine container.
      --image='': The image for the container to run.
      --image-pull-policy='': The image pull policy for the container. If left empty, this value will not be specified by the client and defaulted by the server
  -l, --labels='': Comma separated labels to apply to the pod(s). Will override previous values.
      --leave-stdin-open=false: If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.
      --limits='': The resource requirement limits for this container.  For example, 'cpu=200m,memory=512Mi'.  Note that server side components may assign limits depending on the server configuration, such as limit ranges.
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
      --overrides='': An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.
      --pod-running-timeout=1m0s: The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running
      --port='': The port that this container exposes.  If --expose is true, this is also the port used by the service that is created.
      --quiet=false: If true, suppress prompt messages.
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
  -r, --replicas=1: Number of replicas to create for this container. Default is 1.
      --requests='': The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.
      --restart='Always': The restart policy for this Pod.  Legal values [Always, OnFailure, Never].  If set to 'Always' a deployment is created, if set to 'OnFailure' a job is created, if set to 'Never', a regular pod is created. For the latter two --replicas must be 1.  Default 'Always', for CronJobs `Never`.
      --rm=false: If true, delete resources created in this command for attached containers.
      --save-config=false: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
      --schedule='': A schedule in the Cron format the job should be run with.
      --service-generator='service/v2': The name of the generator to use for creating a service.  Only used if --expose is true
      --service-overrides='': An inline JSON override for the generated service object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.  Only used if --expose is true.
      --serviceaccount='': Service account to set in the pod spec
  -i, --stdin=false: Keep stdin open on the container(s) in the pod, even if nothing is attached.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --timeout=0s: The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object
  -t, --tty=false: Allocated a TTY for each container in the pod.
      --wait=false: If true, wait for resources to be gone before returning. This waits for finalizers.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help cp 
Copy files and directories to and from containers.

Usage:
  oc cp <file-spec-src> <file-spec-dest> [flags]

Examples:
  # !!!Important Note!!!
  # Requires that the 'tar' binary is present in your container
  # image.  If 'tar' is not present, 'oc cp' will fail.
  
  # Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the default namespace
  oc cp /tmp/foo_dir <some-pod>:/tmp/bar_dir
  
  # Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container
  oc cp /tmp/foo <some-pod>:/tmp/bar -c <specific-container>
  
  # Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace <some-namespace>
  oc cp /tmp/foo <some-namespace>/<some-pod>:/tmp/bar
  
  # Copy /tmp/foo from a remote pod to /tmp/bar locally
  oc cp <some-namespace>/<some-pod>:/tmp/foo /tmp/bar

Options:
  -c, --container='': Container name. If omitted, the first container in the pod will be chosen

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help wait 
Experimental: Wait for one condition on one or many resources

Usage:
  oc wait resource.group/name [--for=delete|--for condition=available] [flags]

Options:
      --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
  -f, --filename=[]: identifying the resource.
      --for='': The condition to wait on: [delete|condition=condition-name].
  -o, --output='': Output format. One of: json|yaml|name|go-template|go-template-file|templatefile|template|jsonpath|jsonpath-file.
  -R, --recursive=true: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --timeout=30s: The length of time to wait before giving up.  Zero means check once and don't wait, negative means wait for a week.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help adm 
Administrative Commands 

Commands for managing a cluster are exposed here. Many administrative actions involve interaction with the command-line client as well.

Usage:
  oc adm [flags]

Component Installation:
  router                             Install a router
  ipfailover                         Install an IP failover group to a set of nodes
  registry                           Install the integrated Docker registry

Security and Policy:
  new-project                        Create a new project
  policy                             Manage policy
  groups                             Manage groups
  ca                                 Manage certificates and keys
  certificate                        Modify certificate resources.

Node Management:
  create-node-config                 Create a configuration bundle for a node
  manage-node                        Manage nodes - list pods, evacuate, or mark ready
  cordon                             Mark node as unschedulable
  uncordon                           Mark node as schedulable
  drain                              Drain node in preparation for maintenance
  taint                              Update the taints on one or more nodes
  pod-network                        Manage pod network

Maintenance:
  diagnostics                        Diagnose common cluster problems
  prune                              Remove older versions of resources from the server
  build-chain                        Output the inputs and dependencies of your builds
  migrate                            Migrate data in the cluster
  top                                Show usage statistics of resources on the server
  verify-image-signature             Verify the image identity contained in the image signature

Configuration:
  create-kubeconfig                  Create a basic .kubeconfig file from client certs
  create-api-client-config           Create a config file for connecting to the server as a user
  create-bootstrap-project-template  Create a bootstrap project template
  create-bootstrap-policy-file       Create the default bootstrap policy
  create-login-template              Create a login template
  create-provider-selection-template Create a provider selection template
  create-error-template              Create an error page template

Other Commands:
  completion                         Output shell completion code for the specified shell (bash or zsh)
  config                             Change configuration files for the client

Use "oc adm <command> --help" for more information about a given command.
Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm options 

>oc adm router --help 
Install or configure a router 

This command helps to setup a router to take edge traffic and balance it to your application. With no arguments, the command will check for an existing router service called 'router' and create one if it does not exist. If you want to test whether a router has already been created add the --dry-run flag and the command will exit with 1 if the registry does not exist. 

If a router does not exist with the given name, this command will create a deployment configuration and service that will run the router. If you are running your router in production, you should pass --replicas=2 or higher to ensure you have failover protection.

Usage:
  oc adm router [NAME] [flags]

Examples:
  # Check the default router ("router")
  oc adm router --dry-run
  
  # See what the router would look like if created
  oc adm router -o yaml
  
  # Create a router with two replicas if it does not exist
  oc adm router router-west --replicas=2
  
  # Use a different router image
  oc adm router region-west --images=myrepo/somerouter:mytag
  
  # Run the router with a hint to the underlying implementation to _not_ expose statistics.
  oc adm router router-west --stats-port=0

Options:
      --ciphers='': Specifies the cipher suites to use. You can choose a predefined cipher set ('modern', 'intermediate', or 'old') or specify exact cipher suites by passing a : separated list. Not supported for F5.
      --create=false: deprecated; this is now the default behavior
      --default-cert='': Optional path to a certificate file that be used as the default certificate.  The file should contain the cert, key, and any CA certs necessary for the router to serve the certificate. Does not apply to external appliance based routers (e.g. F5)
      --disable-namespace-ownership-check=false: Disables the namespace ownership check and allows different namespaces to claim either different paths to a route host or overlapping host names in case of a wildcard route. The default behavior (false) to restrict claims to the oldest namespace that has claimed either the host or the subdomain. Please be aware that if namespace ownership checks are disabled, routes in a different namespace can use this mechanism to 'steal' sub-paths for existing domains. This is only safe if route creation privileges are restricted, or if all the users can be trusted.
      --dry-run=false: If true, show the result of the operation without performing it.
      --extended-logging=false: If true, then configure the router with additional logging.
      --external-host='': If the underlying router implementation connects with an external host, this is the external host's hostname.
      --external-host-http-vserver='': If the underlying router implementation uses virtual servers, this is the name of the virtual server for HTTP connections.
      --external-host-https-vserver='': If the underlying router implementation uses virtual servers, this is the name of the virtual server for HTTPS connections.
      --external-host-insecure=false: If the underlying router implementation connects with an external host over a secure connection, this causes the router to skip strict certificate verification with the external host.
      --external-host-internal-ip='': If the underlying router implementation requires the use of a specific network interface to connect to the pod network, this is the IP address of that internal interface.
      --external-host-partition-path='': If the underlying router implementation uses partitions for control boundaries, this is the path to use for that partition.
      --external-host-password='': If the underlying router implementation connects with an external host, this is the password for authenticating with the external host.
      --external-host-private-key='': If the underlying router implementation requires an SSH private key, this is the path to the private key file.
      --external-host-username='': If the underlying router implementation connects with an external host, this is the username for authenticating with the external host.
      --external-host-vxlan-gw='': If the underlying router implementation requires VxLAN access to the pod network, this is the gateway address that should be used in cidr format.
      --force-subdomain='': A router path format to force on all routes used by this router (will ignore the route host value)
      --host-network=true: If true (the default), then use host networking rather than using a separate container network stack. Not required for external appliance based routers (e.g. F5)
      --host-ports=true: If true (the default), when not using host networking host ports will be exposed. Not required for external appliance based routers (e.g. F5)
      --images='registry.redhat.io/openshift3/ose-${component}:${version}': The image to base this router on - ${component} will be replaced with --type
      --labels='router=<name>': A set of labels to uniquely identify the router and its components.
      --latest-images=false: If true, attempt to use the latest images for the router instead of the latest release.
      --local=false: If true, do not contact the apiserver
      --max-connections='': Specifies the maximum number of concurrent connections. Not supported for F5.
      --mutual-tls-auth='none': Controls access to the router using mutually agreed upon TLS configuration (example client certificates). You can choose one of 'required', 'optional', or 'none'. The default is none.
      --mutual-tls-auth-ca='': Optional path to a file containing one or more CA certificates used for mutual TLS authentication. The CA certificate[s] are used by the router to verify a client's certificate.
      --mutual-tls-auth-crl='': Optional path to a file containing the certificate revocation list used for mutual TLS authentication. The certificate revocation list is used by the router to verify a client's certificate.
      --mutual-tls-auth-filter='': Optional regular expression to filter the client certificates. If the client certificate subject field does _not_ match this regular expression, requests will be rejected by the router.
  -o, --output='': Output results as yaml or json instead of executing, or use name for succint output (resource/name).
      --output-version='': The preferred API versions of the output objects
      --ports='80:80,443:443': A comma delimited list of ports or port pairs that set the port in the router pod containerPort and hostPort. It also sets service port and targetPort to expose on the router pod. This does not modify the env variables. That can be done using oc set env or by editing the router's dc. This is used when host-network=false.
      --replicas=1: The replication factor of the router; commonly 2 when high availability is desired.
      --router-canonical-hostname='': CanonicalHostname is the external host name for the router that can be used as a CNAME for the host requested for this route. This value is optional and may not be set in all cases.
      --secrets-as-env=false: If true, use environment variables for master secrets.
      --selector='': Selector used to filter nodes on deployment. Used to run routers on a specific set of nodes.
      --service-account='router': Name of the service account to use to run the router pod.
  -a, --show-all=true: When printing, show all resources (false means hide terminated pods.)
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.
      --stats-password='': If the underlying router implementation can provide statistics this is the requested password for auth.  If not set a password will be generated. Not available for external appliance based routers (e.g. F5)
      --stats-port=1936: If the underlying router implementation can provide statistics this is a hint to expose it on this port. Specify 0 if you want to turn off exposing the statistics.
      --stats-user='admin': If the underlying router implementation can provide statistics this is the requested username for auth. Not available for external appliance based routers (e.g. F5)
      --strict-sni=false: Use strict-sni bind processing (do not use default cert). Not supported for F5.
      --subdomain='': The template for the route subdomain exposed by this router, used for routes that are not externally specified. E.g. '${name}-${namespace}.apps.mycompany.com'
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --threads=0: Specifies the number of threads for the haproxy router.
      --type='haproxy-router': The type of router to use - if you specify --images this flag may be ignored.

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm ipfailover --help 
Configure or view IP Failover configuration 

This command helps to setup an IP failover configuration for the cluster. An administrator can configure IP failover on an entire cluster or on a subset of nodes (as defined via a labeled selector). 

If an IP failover configuration does not exist with the given name, the --create flag can be passed to create a deployment configuration that will provide IP failover capability. If you are running in production, it is recommended that the labeled selector for the nodes matches at least 2 nodes to ensure you have failover protection, and that you provide a --replicas= <n> value that matches the number of nodes for the given labeled selector.

Usage:
  oc adm ipfailover [NAME] [flags]

Examples:
  # Check the default IP failover configuration ("ipfailover"):
  oc adm ipfailover
  
  # See what the IP failover configuration would look like if it is created:
  oc adm ipfailover -o json
  
  # Create an IP failover configuration if it does not already exist:
  oc adm ipfailover ipf --virtual-ips="10.1.1.1-4" --create
  
  # Create an IP failover configuration on a selection of nodes labeled
  # "router=us-west-ha" (on 4 nodes with 7 virtual IPs monitoring a service
  # listening on port 80, such as the router process).
  oc adm ipfailover ipfailover --selector="router=us-west-ha" --virtual-ips="1.2.3.4,10.1.1.100-104,5.6.7.8" --watch-port=80 --replicas=4 --create
  
  # Use a different IP failover config image and see the configuration:
  oc adm ipfailover ipf-alt --selector="hagroup=us-west-ha" --virtual-ips="1.2.3.4" -o yaml --images=myrepo/myipfailover:mytag

Options:
      --check-interval=2: Run the check-script at this interval (seconds)
      --check-script='': Run this script at the check-interval to verify service is OK
      --create=false: If true, create the configuration if it does not exist.
      --dry-run=false: If true, show the result of the operation without performing it.
      --images='registry.redhat.io/openshift3/ose-${component}:${version}': The image to base this IP failover configurator on - ${component} will be replaced based on --type.
  -i, --interface='': Network interface bound by VRRP to use for the set of virtual IP ranges/addresses specified.
      --iptables-chain='INPUT': Add a rule to this iptables chain to accept 224.0.0.28 multicast packets if no rule exists. When iptables-chain is empty do not change iptables.
      --latest-images=false: If true, attempt to use the latest images instead of the current release
      --notify-script='': Run this script when state changes.
  -o, --output='': Output results as yaml or json instead of executing, or use name for succint output (resource/name).
      --output-version='': The preferred API versions of the output objects
      --preemption-strategy='preempt_delay 300': Normlly VRRP will preempt a lower priority machine when a higher priority one comes online. 'nopreempt' allows the lower priority machine to maintain its MASTER status. The default 'preempt_delay 300' causes MASTER to switch after 5 min.
  -r, --replicas=1: The replication factor of this IP failover configuration; commonly 2 when high availability is desired. Please ensure this matches the number of nodes that satisfy the selector (or default selector) specified.
  -l, --selector='ipfailover=<name>': Selector (label query) to filter nodes on.
      --service-account='ipfailover': Name of the service account to use to run the ipfailover pod.
  -a, --show-all=true: When printing, show all resources (false means hide terminated pods.)
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --type='keepalived': The type of IP failover configurator to use.
      --virtual-ip-groups=0: Number of groups to create for VRRP, if not set a group will be created for each virtual ip given on --virtual-ips.
      --virtual-ips='': A set of virtual IP ranges and/or addresses that the routers bind and serve on and provide IP failover capability for.
      --vrrp-id-offset=0: Offset to use for setting ids of VRRP instances (default offset is 0). This allows multiple ipfailover instances to run within the same cluster.
  -w, --watch-port=80: Port to monitor or watch for resource availability.

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm registry --help 
Install or configure an integrated Docker registry 

This command sets up a Docker registry integrated with your cluster to provide notifications when images are pushed. With no arguments, the command will check for the existing registry service called 'docker-registry' and try to create it. If you want to test whether the registry has been created add the --dry-run flag and the command will exit with 1 if the registry does not exist. 

To run a highly available registry, you should be using a remote storage mechanism like an object store (several are supported by the Docker registry). The default Docker registry image is configured to accept configuration as environment variables - refer to the configuration file in that image for more on setting up alternative storage. Once you've made those changes, you can pass --replicas=2 or higher to ensure you have failover protection. The default registry setup uses a local volume and the data will be lost if you delete the running pod. 

If multiple ports are specified using the option --ports, the first specified port will be chosen for use as the REGISTRY HTTP ADDR and will be passed to Docker registry. 

NOTE: This command is intended to simplify the tasks of setting up a Docker registry in a new installation. Some configuration beyond this command is still required to make your registry persist data.

Usage:
  oc adm registry [flags]

Examples:
  # Check if default Docker registry ("docker-registry") has been created
  oc adm registry --dry-run
  
  # See what the registry will look like if created
  oc adm registry -o yaml
  
  # Create a registry with two replicas if it does not exist
  oc adm registry --replicas=2
  
  # Use a different registry image
  oc adm registry --images=myrepo/docker-registry:mytag
  
  # Enforce quota and limits on images
  oc adm registry --enforce-quota

Options:
      --cluster-ip='': Specify the ClusterIP value for the docker-registry service
      --create=false: deprecated; this is now the default behavior
      --daemonset=false: If true, use a daemonset instead of a deployment config.
      --dry-run=false: If true, show the result of the operation without performing it.
      --enforce-quota=false: If true, the registry will refuse to write blobs if they exceed quota limits
      --fs-group='': Specify fsGroup which is an ID that grants group access to registry block storage
      --images='registry.redhat.io/openshift3/ose-${component}:${version}': The image to base this registry on - ${component} will be replaced with --type
      --labels='docker-registry=default': A set of labels to uniquely identify the registry and its components.
      --latest-images=false: If true, attempt to use the latest image for the registry instead of the latest release.
      --local=false: If true, do not contact the apiserver
      --mount-host='': If set, the registry volume will be created as a host-mount at this path.
  -o, --output='': Output results as yaml or json instead of executing, or use name for succint output (resource/name).
      --output-version='': The preferred API versions of the output objects
      --ports='5000': A comma delimited list of ports or port pairs to expose on the registry pod. The default is set for 5000.
      --replicas=1: The replication factor of the registry; commonly 2 when high availability is desired.
      --selector='': Selector used to filter nodes on deployment. Used to run registries on a specific set of nodes.
      --service-account='registry': Name of the service account to use to run the registry pod.
  -a, --show-all=true: When printing, show all resources (false means hide terminated pods.)
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.
      --supplemental-groups=[]: Specify supplemental groups which is an array of ID's that grants group access to registry shared storage
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --tls-certificate='': An optional path to a PEM encoded certificate (which may contain the private key) for serving over TLS
      --tls-key='': An optional path to a PEM encoded private key for serving over TLS
      --type='docker-registry': The registry image to use - if you specify --images this flag may be ignored.
      --volume='/registry': The volume path to use for registry storage; defaults to /registry which is the default for origin-docker-registry.

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm new-project --help 
Create a new project 

Use this command to create a project. You may optionally specify metadata about the project, an admin user (and role, if you want to use a non-default admin role), and a node selector to restrict which nodes pods in this project can be scheduled to.

Usage:
  oc adm new-project NAME [--display-name=DISPLAYNAME] [--description=DESCRIPTION] [flags]

Options:
      --admin='': Project admin username
      --admin-role='admin': Project admin role name in the cluster policy
      --description='': Project description
      --display-name='': Project display name
      --node-selector='': Restrict pods onto nodes matching given label selector. Format: '<key1>=<value1>, <key2>=<value2>...'. Specifying "" means any node, not default. If unspecified, cluster default node selector will be used.

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm policy --help 
Manage policy on the cluster 

These commands allow you to assign and manage the roles and policies that apply to users. The reconcile commands allow you to reset and upgrade your system policies to the latest default policies. 

To see more information on roles and policies, use the 'get' and 'describe' commands on the following resources: 'clusterroles', 'clusterpolicy', 'clusterrolebindings', 'roles', 'policy', 'rolebindings', and 'scc'.

Usage:
  oc adm policy [flags]

Discover:
  who-can                         List who can perform the specified action on a resource
  scc-subject-review              Check whether a user or a ServiceAccount can create a Pod.
  scc-review                      Checks which ServiceAccount can create a Pod

Manage project membership:
  remove-user                     Remove user from the current project
  remove-group                    Remove group from the current project

Assign roles to users and groups:
  add-role-to-user                Add a role to users or serviceaccounts for the current project
  add-role-to-group               Add a role to groups for the current project
  remove-role-from-user           Remove a role from users for the current project
  remove-role-from-group          Remove a role from groups for the current project

Assign cluster roles to users and groups:
  add-cluster-role-to-user        Add a role to users for all projects in the cluster
  add-cluster-role-to-group       Add a role to groups for all projects in the cluster
  remove-cluster-role-from-user   Remove a role from users for all projects in the cluster
  remove-cluster-role-from-group  Remove a role from groups for all projects in the cluster

Manage policy on pods and containers:
  add-scc-to-user                 Add security context constraint to users or a service account
  add-scc-to-group                Add security context constraint to groups
  remove-scc-from-user            Remove user from scc
  remove-scc-from-group           Remove group from scc

Upgrade and repair system policy:
  reconcile-cluster-roles         Update cluster roles to match the recommended bootstrap policy
  reconcile-cluster-role-bindings Update cluster role bindings to match the recommended bootstrap policy
  reconcile-sccs                  Replace cluster SCCs to match the recommended bootstrap policy

Use "oc adm policy <command> --help" for more information about a given command.
Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm groups --help 
Manage groups in your cluster 

Groups are sets of users that can be used when describing policy.

Usage:
  oc adm groups [flags]

Available Commands:
  add-users    Add users to a group
  new          Create a new group
  prune        Remove old OpenShift groups referencing missing records on an external provider
  remove-users Remove users from a group
  sync         Sync OpenShift groups with records from an external provider.

Use "oc adm <command> --help" for more information about a given command.
Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm ca --help 
Manage certificates and keys

Usage:
  oc adm ca [flags]

Available Commands:
  create-key-pair     Create a public/private key pair
  create-master-certs Create certificates and keys for a master
  create-server-cert  Create a signed server certificate and key
  create-signer-cert  Create a signer (certificate authority/CA) certificate and key
  decrypt             Decrypt data encrypted with "oc adm ca encrypt"
  encrypt             Encrypt data with AES-256-CBC encryption

Use "oc adm <command> --help" for more information about a given command.
Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm certificate --help 
Modify certificate resources.

Usage:
  oc adm certificate SUBCOMMAND [flags]

Available Commands:
  approve     Approve a certificate signing request
  deny        Deny a certificate signing request

Use "oc adm <command> --help" for more information about a given command.
Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm create-node-config --help 
Create a configuration bundle for a node

Usage:
  oc adm create-node-config [flags]

Options:
      --allow-disabled-docker=false: Allow the node to start without docker being available.
      --dns-bind-address='': An address to bind DNS to.
      --dns-domain='cluster.local': DNS domain for the cluster.
      --dns-ip='': DNS server IP for the cluster.
      --expire-days=730: Validity of the certificates in days (defaults to 2 years). WARNING: extending this above default value is highly discouraged.
      --hostnames=[]: Every hostname or IP you want server certs to be valid for. Comma delimited list
      --images='registry.redhat.io/openshift3/ose-${component}:${version}': When fetching the network container image, use this format. The latest release will be used by default.
      --latest-images=false: If true, attempt to use the latest images for the cluster instead of the latest release.
      --listen='https://0.0.0.0:10250': The address to listen for connections on (scheme://host:port).
      --master='https://localhost:8443': The API server's URL.
      --network-plugin='': Name of the network plugin to hook to for pod networking.
      --node='': The name of the node as it appears in etcd.
      --node-client-certificate-authority='openshift.local.config/master/ca.crt': The file containing signing authorities to use to verify requests to the node. If empty, all requests will be allowed.
      --node-dir='': The client data directory.
      --server-certificate='': The server cert file for the node to serve secure traffic.
      --server-key='': The server key file for the node to serve secure traffic.
      --signer-cert='openshift.local.config/master/ca.crt': The certificate file.
      --signer-key='openshift.local.config/master/ca.key': The key file.
      --signer-serial='openshift.local.config/master/ca.serial.txt': The serial file that keeps track of how many certs have been signed.
      --volume-dir='openshift.local.volumes': The volume storage directory.  This path is not relativized.

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm manage-node --help 
Manage nodes 

This command provides common operations on nodes for administrators. 

schedulable: Marking node schedulable will allow pods to be schedulable on the node and marking node unschedulable will block pods to be scheduled on the node. 

evacuate: Migrate all/selected pod on the provided nodes. 

list-pods: List all/selected pods on given/selected nodes. It can list the output in json/yaml format.

Usage:
  oc adm manage-node [flags]

Examples:
  # Block accepting any pods on given nodes
  oc adm manage-node <mynode> --schedulable=false
  
  # Mark selected nodes as schedulable
  oc adm manage-node --selector="<env=dev>" --schedulable=true
  
  # Migrate selected pods
  oc adm manage-node <mynode> --evacuate --pod-selector="<service=myapp>"
  
  # Migrate selected pods, use a grace period of 60 seconds
  oc adm manage-node <mynode> --evacuate --grace-period=60 --pod-selector="<service=myapp>"
  
  # Migrate selected pods not backed by replication controller
  oc adm manage-node <mynode> --evacuate --force --pod-selector="<service=myapp>"
  
  # Show pods that will be migrated
  oc adm manage-node <mynode> --evacuate --dry-run --pod-selector="<service=myapp>"
  
  # List all pods on given nodes
  oc adm manage-node <mynode1> <mynode2> --list-pods

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --dry-run=false: Show pods that will be migrated. Optional param for --evacuate
      --force=false: Delete pods not backed by replication controller. Optional param for --evacuate
      --grace-period=30: Grace period (seconds) for pods being deleted. Ignored if negative. Optional param for --evacuate
      --list-pods=false: List all/selected pods on the node. Printer flags --output, etc. are only valid for this option.
      --no-headers=false: When using the default or custom-column output format, don't print headers (default print headers).
  -o, --output='': Output format. One of: json|yaml|wide|name|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=... See custom columns [http://kubernetes.io/docs/user-guide/kubectl-overview/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [http://kubernetes.io/docs/user-guide/jsonpath].
      --pod-selector='': Label selector to filter pods on the node. Optional param for --evacuate or --list-pods
      --schedulable=false: Control pod schedulability on the node.
      --selector='': Label selector to filter nodes. Either pass one/more nodes as arguments or use this node selector
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm cordon --help 
Mark node as unschedulable.

Usage:
  oc adm cordon NODE [flags]

Examples:
  # Mark node "foo" as unschedulable.
  oc adm cordon foo

Options:
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -l, --selector='': Selector (label query) to filter on

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm uncordon --help 
Mark node as schedulable.

Usage:
  oc adm uncordon NODE [flags]

Examples:
  # Mark node "foo" as schedulable.
  $ oc adm uncordon foo

Options:
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -l, --selector='': Selector (label query) to filter on

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm drain --help 
Drain node in preparation for maintenance. 

The given node will be marked unschedulable to prevent new pods from arriving. 'drain' evicts the pods if the APIServer supports eviction (http://kubernetes.io/docs/admin/disruptions/). Otherwise, it will use normal DELETE to delete the pods. The 'drain' evicts or deletes all pods except mirror pods (which cannot be deleted through the API server).  If there are DaemonSet-managed pods, drain will not proceed without --ignore-daemonsets, and regardless it will not delete any DaemonSet-managed pods, because those pods would be immediately replaced by the DaemonSet controller, which ignores unschedulable markings.  If there are any pods that are neither mirror pods nor managed by ReplicationController, ReplicaSet, DaemonSet, StatefulSet or Job, then drain will not delete any pods unless you use --force.  --force will also allow deletion to proceed if the managing resource of one or more pods is missing. 

'drain' waits for graceful termination. You should not operate on the machine until the command completes. 

When you are ready to put the node back into service, use kubectl uncordon, which will make the node schedulable again. 

! http://kubernetes.io/images/docs/kubectl_drain.svg

Usage:
  oc adm drain NODE [flags]

Examples:
  # Drain node "foo", even if there are pods not managed by a ReplicationController, ReplicaSet, Job, DaemonSet or StatefulSet on it.
  $ oc adm drain foo --force
  
  # As above, but abort if there are pods not managed by a ReplicationController, ReplicaSet, Job, DaemonSet or StatefulSet, and use a grace period of 15 minutes.
  $ oc adm drain foo --grace-period=900

Options:
      --delete-local-data=false: Continue even if there are pods using emptyDir (local data that will be deleted when the node is drained).
      --dry-run=false: If true, only print the object that would be sent, without sending it.
      --force=false: Continue even if there are pods not managed by a ReplicationController, ReplicaSet, Job, DaemonSet or StatefulSet.
      --grace-period=-1: Period of time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used.
      --ignore-daemonsets=false: Ignore DaemonSet-managed pods.
      --pod-selector='': Label selector to filter pods on the node
  -l, --selector='': Selector (label query) to filter on
      --timeout=0s: The length of time to wait before giving up, zero means infinite

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm taint --help 
Update the taints on one or more nodes. 

  * A taint consists of a key, value, and effect. As an argument here, it is expressed as key=value:effect.
  * The key must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  253 characters.
  * Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app
  * The value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters.
  * The effect must be NoSchedule, PreferNoSchedule or NoExecute.
  * Currently taint can only apply to node.

Usage:
  oc adm taint NODE NAME KEY_1=VAL_1:TAINT_EFFECT_1 ... KEY_N=VAL_N:TAINT_EFFECT_N [flags]

Examples:
  # Update node 'foo' with a taint with key 'dedicated' and value 'special-user' and effect 'NoSchedule'.
  # If a taint with that key and effect already exists, its value is replaced as specified.
  oc adm taint nodes foo dedicated=special-user:NoSchedule
  
  # Remove from node 'foo' the taint with key 'dedicated' and effect 'NoSchedule' if one exists.
  oc adm taint nodes foo dedicated:NoSchedule-
  
  # Remove from node 'foo' all the taints with key 'dedicated'
  oc adm taint nodes foo dedicated-
  
  # Add a taint with key 'dedicated' on nodes having label mylabel=X
  oc adm taint node -l myLabel=X  dedicated=foo:PreferNoSchedule

Options:
      --all=false: Select all nodes in the cluster
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
  -o, --output='': Output format. One of: json|yaml|name|go-template-file|templatefile|template|go-template|jsonpath|jsonpath-file.
      --overwrite=false: If true, allow taints to be overwritten, otherwise reject taint updates that overwrite existing taints.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --validate=false: If true, use a schema to validate the input before sending it

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm pod-network --help 
Manage pod network in the cluster 

This command provides common pod network operations for administrators.

Usage:
  oc adm pod-network [flags]

Available Commands:
  isolate-projects     Isolate project network
  join-projects        Join project network
  make-projects-global Make project network global

Use "oc adm <command> --help" for more information about a given command.
Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm diagnostics --help 
This utility helps troubleshoot and diagnose known problems for an OpenShift cluster and/or local host. The base command runs a standard set of diagnostics: 

  oc adm diagnostics
  
Available diagnostics vary based on client config and local OpenShift host config. Config files in standard locations for client, master, and node are used, or you may specify config files explicitly with flags. For example: 

  oc adm diagnostics --master-config=/etc/origin/master/master-config.yaml
  
  * Explicitly specifying a config file raises an error if it is not found.  
  * A client config with cluster-admin access is required for most cluster diagnostics.  
  * Diagnostics that require a config file are skipped if it is not found.  
  * The standard set also skips diagnostics considered too heavyweight.  

An individual diagnostic may be run as a subcommand which may have flags for specifying options specific to that diagnostic. 

Finally, the "all" subcommand runs all available diagnostics (including heavyweight ones skipped in the standard set) and provides all individual diagnostic flags.

Usage:
  oc adm diagnostics [flags]

Available Commands:
  aggregatedlogging          Check aggregated logging integration for proper configuration
  all                        Diagnose common cluster problems
  analyzelogs                Check for recent problems in systemd service logs
  appcreate                  Create an application and test that it deploys correctly.
  clusterregistry            Check that there is a working Docker registry
  clusterrolebindings        Check that the default ClusterRoleBindings are present and contain the expected subjects
  clusterroles               Check that the default ClusterRoles are present and contain the expected permissions
  clusterrouter              Check there is a working router
  configcontexts             Validate client config context is complete and has connectivity
  diagnosticpod              Create a pod to run diagnostics from the application standpoint
  etcdwritevolume            Check the volume of writes against etcd over a time period and classify them by operation and key
  masternode                 Check if master is also running node (for Open vSwitch)
  metricsapiproxy            Check the integrated heapster metrics can be reached via the API proxy
  networkcheck               Create a pod on all schedulable nodes and run network diagnostics from the application standpoint
  nodedefinitions            Check node records on master
  routecertificatevalidation Check all route certificates for certificates that might be rejected by extended validation.
  securitycontextconstraints Check that the default SecurityContextConstraints are present and contain the expected permissions
  serviceexternalips         Check for existing services with ExternalIPs that are disallowed by master config
  unitstatus                 Check status for related systemd units

Options:
      --cluster-context='': Client context to use for cluster administrator
  -l, --diaglevel=1: Level of diagnostic output: 4: Error, 3: Warn, 2: Notice, 1: Info, 0: Debug
      --host=false: If true, look for systemd and journald units even without master/node config
      --master-config='': Path to master config file (implies --host)
      --node-config='': Path to node config file (implies --host)
      --prevent-modification=false: If true, may be set to prevent diagnostics making any changes via the API

Use "oc adm <command> --help" for more information about a given command.
Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm prune --help 
Remove older versions of resources from the server 

The commands here allow administrators to manage the older versions of resources on the system by removing them.

Usage:
  oc adm prune [flags]

Available Commands:
  auth        Removes references to the specified roles, clusterroles, users, and groups.
  builds      Remove old completed and failed builds
  deployments Remove old completed and failed deployments
  groups      Remove old OpenShift groups referencing missing records on an external provider
  images      Remove unreferenced images

Use "oc adm <command> --help" for more information about a given command.
Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm build-chain --help 
Output the inputs and dependencies of your builds 

Supported formats for the generated graph are dot and a human-readable output. Tag and namespace are optional and if they are not specified, 'latest' and the default namespace will be used respectively.

Usage:
  oc adm build-chain IMAGESTREAMTAG [flags]

Examples:
  # Build the dependency tree for the 'latest' tag in <image-stream>
  oc adm build-chain <image-stream>
  
  # Build the dependency tree for 'v2' tag in dot format and visualize it via the dot utility
  oc adm build-chain <image-stream>:v2 -o dot | dot -T svg -o deps.svg
  
  # Build the dependency tree across all namespaces for the specified image stream tag found in 'test' namespace
  oc adm build-chain <image-stream> -n test --all

Options:
      --all=false: If true, build dependency tree for the specified image stream tag across all namespaces
  -o, --output='': Output format of dependency tree
      --reverse=false: If true, show the istags dependencies instead of its dependants.
      --trigger-only=true: If true, only include dependencies based on build triggers. If false, include all dependencies.

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm migrate --help 
Migrate resources on the cluster 

These commands assist administrators in performing preventative maintenance on a cluster.

Usage:
  oc adm migrate [flags]

Available Commands:
  etcd-ttl           Attach keys to etcd v3 leases to assist in etcd v2 migrations
  image-references   Update embedded Docker image references
  legacy-hpa         Update HPAs to point to the latest group-version-kinds
  storage            Update the stored version of API objects
  template-instances Update TemplateInstances to point to the latest group-version-kinds

Use "oc adm <command> --help" for more information about a given command.
Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm top --help 
Show usage statistics of resources on the server 

This command analyzes resources managed by the platform and presents current usage statistics.

Usage:
  oc adm top [flags]

Available Commands:
  images       Show usage statistics for Images
  imagestreams Show usage statistics for ImageStreams
  node         Display Resource (CPU/Memory/Storage) usage of nodes
  pod          Display Resource (CPU/Memory/Storage) usage of pods

Use "oc adm <command> --help" for more information about a given command.
Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm verify-image-signature --help 
Verifies the image signature of an image imported to internal registry using the local public GPG key. 

This command verifies if the image identity contained in the image signature can be trusted by using the public GPG key to verify the signature itself and matching the provided expected identity with the identity (pull spec) of the given image. By default, this command will use the public GPG keyring located in "$GNUPGHOME/.gnupg/pubring.gpg" 

By default, this command will not save the result of the verification back to the image object, to do so user have to specify the "--save" flag. Note that to modify the image signature verification status, user have to have permissions to edit an image object (usually an "image-auditor" role). 

Note that using the "--save" flag on already verified image together with invalid GPG key or invalid expected identity will cause the saved verification status to be removed and the image will become "unverified". 

If this command is outside the cluster, users have to specify the "--registry-url" parameter with the public URL of image registry. 

To remove all verifications, users can use the "--remove-all" flag.

Usage:
  oc adm verify-image-signature IMAGE --expected-identity=EXPECTED_IDENTITY [--save] [flags]

Examples:
  # Verify the image signature and identity using the local GPG keychain
  oc adm verify-image-signature sha256:c841e9b64e4579bd56c794bdd7c36e1c257110fd2404bebbb8b613e4935228c4 \
  --expected-identity=registry.local:5000/foo/bar:v1
  
  # Verify the image signature and identity using the local GPG keychain and save the status
  oc adm verify-image-signature sha256:c841e9b64e4579bd56c794bdd7c36e1c257110fd2404bebbb8b613e4935228c4 \
  --expected-identity=registry.local:5000/foo/bar:v1 --save
  
  # Verify the image signature and identity via exposed registry route
  oc adm verify-image-signature sha256:c841e9b64e4579bd56c794bdd7c36e1c257110fd2404bebbb8b613e4935228c4 \
  --expected-identity=registry.local:5000/foo/bar:v1 \
  --registry-url=docker-registry.foo.com
  
  # Remove all signature verifications from the image
  oc adm verify-image-signature sha256:c841e9b64e4579bd56c794bdd7c36e1c257110fd2404bebbb8b613e4935228c4 --remove-all

Options:
      --expected-identity='': An expected image docker reference to verify (required).
      --insecure=false: If set, use the insecure protocol for registry communication.
      --public-key='pubring.gpg': A path to a public GPG key to be used for verification. (defaults to "pubring.gpg")
      --registry-url='': The address to use when contacting the registry, instead of using the internal cluster address. This is useful if you can't resolve or reach the internal registry address.
      --remove-all=false: If set, all signature verifications will be removed from the given image.
      --save=false: If true, the result of the verification will be saved to an image object.

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm create-kubeconfig --help 
Create's a .kubeconfig file at <--kubeconfig> that looks like this: 

  clusters:
  - cluster:
  certificate-authority-data: <contents of --certificate-authority>
  server: <--master>
  name: <--cluster>
  - cluster:
  certificate-authority-data: <contents of --certificate-authority>
  server: <--public-master>
  name: public-<--cluster>
  contexts:
  - context:
  cluster: <--cluster>
  user: <--user>
  namespace: <--namespace>
  name: <--context>
  - context:
  cluster: public-<--cluster>
  user: <--user>
  namespace: <--namespace>
  name: public-<--context>
  current-context: <--context>
  kind: Config
  users:
  - name: <--user>
  user:
  client-certificate-data: <contents of --client-certificate>
  client-key-data: <contents of --client-key>

Usage:
  oc adm create-kubeconfig [flags]

Options:
      --master='https://localhost:8443': The API server's URL.
      --public-master='': The API public facing server's URL (if applicable).

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm create-api-client-config --help 
Create a client configuration for connecting to the server 

This command creates a folder containing a client certificate, a client key, a server certificate authority, and a .kubeconfig file for connecting to the master as the provided user.

Usage:
  oc adm create-api-client-config [flags]

Options:
      --basename='': The base filename to use for the .crt, .key, and .kubeconfig files. Defaults to the username.
      --client-dir='': The client data directory.
      --expire-days=730: Validity of the certificates in days (defaults to 2 years). WARNING: extending this above default value is highly discouraged.
      --groups=[]: The list of groups this user belongs to. Comma delimited list
      --master='https://localhost:8443': The API server's URL.
      --public-master='': The API public facing server's URL (if applicable).
      --signer-cert='openshift.local.config/master/ca.crt': The certificate file.
      --signer-key='openshift.local.config/master/ca.key': The key file.
      --signer-serial='openshift.local.config/master/ca.serial.txt': The serial file that keeps track of how many certs have been signed.

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm create-bootstrap-project-template --help 
Create a bootstrap project template

Usage:
  oc adm create-bootstrap-project-template [flags]

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --name='project-request': The name of the template to output.
  -o, --output='json': Output format. One of: json|yaml|name|templatefile|template|go-template|go-template-file|jsonpath|jsonpath-file.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm create-boostrap-policy-file --help 
Administrative Commands 

Commands for managing a cluster are exposed here. Many administrative actions involve interaction with the command-line client as well.

Usage:
  oc adm [flags]

Component Installation:
  router                             Install a router
  ipfailover                         Install an IP failover group to a set of nodes
  registry                           Install the integrated Docker registry

Security and Policy:
  new-project                        Create a new project
  policy                             Manage policy
  groups                             Manage groups
  ca                                 Manage certificates and keys
  certificate                        Modify certificate resources.

Node Management:
  create-node-config                 Create a configuration bundle for a node
  manage-node                        Manage nodes - list pods, evacuate, or mark ready
  cordon                             Mark node as unschedulable
  uncordon                           Mark node as schedulable
  drain                              Drain node in preparation for maintenance
  taint                              Update the taints on one or more nodes
  pod-network                        Manage pod network

Maintenance:
  diagnostics                        Diagnose common cluster problems
  prune                              Remove older versions of resources from the server
  build-chain                        Output the inputs and dependencies of your builds
  migrate                            Migrate data in the cluster
  top                                Show usage statistics of resources on the server
  verify-image-signature             Verify the image identity contained in the image signature

Configuration:
  create-kubeconfig                  Create a basic .kubeconfig file from client certs
  create-api-client-config           Create a config file for connecting to the server as a user
  create-bootstrap-project-template  Create a bootstrap project template
  create-bootstrap-policy-file       Create the default bootstrap policy
  create-login-template              Create a login template
  create-provider-selection-template Create a provider selection template
  create-error-template              Create an error page template

Other Commands:
  completion                         Output shell completion code for the specified shell (bash or zsh)
  config                             Change configuration files for the client

Use "oc adm <command> --help" for more information about a given command.
Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm create-login-template --help 
Create a template for customizing the login page 

This command creates a basic template to use as a starting point for customizing the login page. Save the output to a file and edit the template to change the look and feel or add content. Be careful not to remove any parameter values inside curly braces. 

To use the template, set oauthConfig.templates.login in the master configuration to point to the template file. For example, 

  oauthConfig:
    templates:
      login: templates/login.html

Usage:
  oc adm create-login-template [flags]

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm create-provider-selection-template --help 
Create a template for customizing the provider selection page 

This command creates a basic template to use as a starting point for customizing the login provider selection page. Save the output to a file and edit the template to change the look and feel or add content. Be careful not to remove any parameter values inside curly braces. 

To use the template, set oauthConfig.templates.providerSelection in the master configuration to point to the template file. For example, 

  oauthConfig:
    templates:
      providerSelection: templates/provider-selection.html

Usage:
  oc adm create-provider-selection-template [flags]

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm create-error-template --help 
Create a template for customizing the error page 

This command creates a basic template to use as a starting point for customizing the authentication error page. Save the output to a file and edit the template to change the look and feel or add content. 

To use the template, set oauthConfig.templates.error in the master configuration to point to the template file. For example, 

  oauthConfig:
    templates:
      error: templates/error.html

Usage:
  oc adm create-error-template [flags]

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm completion --help 
This command prints shell code which must be evaluated to provide interactive completion of oc adm commands.

Usage:
  oc adm completion SHELL [flags]

Examples:
  # Generate the oc adm completion code for bash
  oc adm completion bash > bash_completion.sh
  source bash_completion.sh
  
  # The above example depends on the bash-completion framework.
  # It must be sourced before sourcing the openshift cli completion,
  # i.e. on the Mac:
  
  brew install bash-completion
  source $(brew --prefix)/etc/bash_completion
  oc adm completion bash > bash_completion.sh
  source bash_completion.sh
  
  # In zsh*, the following will load openshift cli zsh completion:
  source <(oc adm completion zsh)
  
  * zsh completions are only supported in versions of zsh >= 5.2

Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc adm config --help 
Manage the client config files 

The client stores configuration in the current user's home directory (under the .kube directory as config). When you login the first time, a new config file is created, and subsequent project changes with the 'project' command will set the current context. These subcommands allow you to manage the config directly. 

Reference: https://github.com/kubernetes/kubernetes/blob/master/docs/user-guide/kubeconfig-file.md

Usage:
  oc adm config SUBCOMMAND [flags]

Examples:
  # Change the config context to use
  oc adm config use-context my-context
  
  # Set the value of a config preference
  oc adm config set preferences.some true

Available Commands:
  current-context Displays the current-context
  delete-cluster  Delete the specified cluster from the kubeconfig
  delete-context  Delete the specified context from the kubeconfig
  get-clusters    Display clusters defined in the kubeconfig
  get-contexts    Describe one or many contexts
  rename-context  Renames a context from the kubeconfig file.
  set             Sets an individual value in a kubeconfig file
  set-cluster     Sets a cluster entry in kubeconfig
  set-context     Sets a context entry in kubeconfig
  set-credentials Sets a user entry in kubeconfig
  unset           Unsets an individual value in a kubeconfig file
  use-context     Sets the current-context in a kubeconfig file
  view            Display merged kubeconfig settings or a specified kubeconfig file

Use "oc adm <command> --help" for more information about a given command.
Use "oc adm options" for a list of global command-line options (applies to all commands).

>oc help create 
Create a resource by filename or stdin 

JSON and YAML formats are accepted.

Usage:
  oc create -f FILENAME [flags]

Examples:
  # Create a pod using the data in pod.json.
  oc create -f pod.json
  
  # Create a pod based on the JSON passed into stdin.
  cat pod.json | oc create -f -

Available Commands:
  clusterresourcequota Create cluster resource quota resource.
  clusterrole          Create a ClusterRole.
  clusterrolebinding   Create a ClusterRoleBinding for a particular ClusterRole
  configmap            Create a configmap from a local file, directory or literal value
  deployment           Create a deployment with the specified name.
  deploymentconfig     Create deployment config with default options that uses a given image.
  identity             Manually create an identity (only needed if automatic creation is disabled).
  imagestream          Create a new empty image stream.
  imagestreamtag       Create a new image stream tag.
  job                  Create a job with the specified name.
  namespace            Create a namespace with the specified name
  poddisruptionbudget  Create a pod disruption budget with the specified name.
  priorityclass        Create a priorityclass with the specified name.
  quota                Create a quota with the specified name.
  role                 Create a role with single rule.
  rolebinding          Create a RoleBinding for a particular Role or ClusterRole
  route                Expose containers externally via secured routes
  secret               Create a secret using specified subcommand
  service              Create a service using specified subcommand.
  serviceaccount       Create a service account with the specified name
  user                 Manually create a user (only needed if automatic creation is disabled).
  useridentitymapping  Manually map an identity to a user.

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
      --edit=false: Edit the API resource before creating
  -f, --filename=[]: Filename, directory, or URL to files to use to create the resource
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
      --raw='': Raw URI to POST to the server.  Uses the transport specified by the kubeconfig file.
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --save-config=false: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --validate=false: If true, use a schema to validate the input before sending it
      --windows-line-endings=true: Only relevant if --edit=true. Defaults to the line ending native to your platform.

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc help replace 
Replace a resource by filename or stdin 

JSON and YAML formats are accepted.

Usage:
  oc replace -f FILENAME [flags]

Examples:
  # Replace a pod using the data in pod.json.
  oc replace -f pod.json
  
  # Replace a pod based on the JSON passed into stdin.
  cat pod.json | oc replace -f -
  
  # Force replace, delete and then re-create the resource
  oc replace --force -f pod.json

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --cascade=true: If true, cascade the deletion of the resources managed by this resource (e.g. Pods created by a ReplicationController).  Default true.
  -f, --filename=[]: to use to replace the resource.
      --force=false: Only used when grace-period=0. If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.
      --grace-period=-1: Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --save-config=false: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --timeout=0s: The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object
      --validate=false: If true, use a schema to validate the input before sending it
      --wait=false: If true, wait for resources to be gone before returning. This waits for finalizers.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help apply 
Apply a configuration to a resource by filename or stdin. 

JSON and YAML formats are accepted.

Usage:
  oc apply -f FILENAME [flags]

Examples:
  # Apply the configuration in pod.json to a pod.
  oc apply -f ./pod.json
  
  # Apply the JSON passed into stdin to a pod.
  cat pod.json | oc apply -f -

Available Commands:
  edit-last-applied Edit latest last-applied-configuration annotations of a resource/object
  set-last-applied  Set the last-applied-configuration annotation on a live object to match the contents of a file.
  view-last-applied View latest last-applied-configuration annotations of a resource/object

Options:
      --all=false: Select all resources in the namespace of the specified resource types.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --cascade=true: If true, cascade the deletion of the resources managed by this resource (e.g. Pods created by a ReplicationController).  Default true.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -f, --filename=[]: that contains the configuration to apply
      --force=false: Only used when grace-period=0. If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.
      --grace-period=-1: Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).
      --include-uninitialized=false: If true, the kubectl command applies to uninitialized objects. If explicitly set to false, this flag overrides other flags that make the kubectl commands apply to uninitialized objects, e.g., "--all". Objects with empty metadata.initializers are regarded as initialized.
      --openapi-patch=true: If true, use openapi to calculate diff when the openapi presents and the resource can be found in the openapi spec. Otherwise, fall back to use baked-in types.
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath-file|jsonpath.
      --overwrite=true: Automatically resolve conflicts between the modified and live configuration by using values from the modified configuration
      --prune=false: Automatically delete resource objects, including the uninitialized ones, that do not appear in the configs and are created by either apply or create --save-config. Should be used with either -l or --all.
      --prune-whitelist=[]: Overwrite the default whitelist with <group/version/kind> for --prune
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --timeout=0s: The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object
      --validate=false: If true, use a schema to validate the input before sending it
      --wait=false: If true, wait for resources to be gone before returning. This waits for finalizers.

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc help patch 
Update field(s) of a resource using strategic merge patch 

JSON and YAML formats are accepted.

Usage:
  oc patch (-f FILENAME | TYPE NAME) -p PATCH [flags]

Examples:
  # Partially update a node using strategic merge patch
  oc patch node k8s-node-1 -p '{"spec":{"unschedulable":true}}'

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to update
      --local=false: If true, patch will operate on the content of the file, not the server-side resource.
  -o, --output='': Output format. One of: json|yaml|name|template|go-template|go-template-file|templatefile|jsonpath|jsonpath-file.
  -p, --patch='': The patch to be applied to the resource JSON file.
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --type='strategic': The type of patch being provided; one of [json merge strategic]

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help process 
Process template into a list of resources specified in filename or stdin 

Templates allow parameterization of resources prior to being sent to the server for creation or update. Templates have "parameters", which may either be generated on creation or set by the user, as well as metadata describing the template. 

The output of the process command is always a list of one or more resources. You may pipe the output to the create command over STDIN (using the '-f -' option) or redirect it to a file. 

Process resolves the template on the server, but you may pass --local to parameterize the template locally. When running locally be aware that the version of your client tools will determine what template transformations are supported, rather than the server.

Usage:
  oc process (TEMPLATE | -f FILENAME) [-p=KEY=VALUE] [flags]

Examples:
  # Convert template.json file into resource list and pass to create
  oc process -f template.json | oc create -f -
  
  # Process a file locally instead of contacting the server
  oc process -f template.json --local -o yaml
  
  # Process template while passing a user-defined label
  oc process -f template.json -l name=mytemplate
  
  # Convert stored template into resource list
  oc process foo
  
  # Convert stored template into resource list by setting/overriding parameter values
  oc process foo PARM1=VALUE1 PARM2=VALUE2
  
  # Convert template stored in different namespace into a resource list
  oc process openshift//foo
  
  # Convert template.json into resource list
  cat template.json | oc process -f -

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
  -f, --filename='': Filename or URL to file to read a template
      --ignore-unknown-parameters=false: If true, will not stop processing if a provided parameter does not exist in the template.
  -l, --labels='': Label to set in all resources for this template
      --local=false: If true process the template locally instead of contacting the server.
  -o, --output='json': Output format. One of: json|yaml|name|describe|go-template-file|templatefile|template|go-template|jsonpath|jsonpath-file.
  -p, --param=[]: Specify a key-value pair (eg. -p FOO=BAR) to set/override a parameter value in the template.
      --param-file=[]: File containing template parameter values to set/override in the template.
      --parameters=false: If true, do not process but only print available parameters
      --raw=false: If true, output the processed template instead of the template's objects. Implied by -o describe
  -t, --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help export 
Export resources so they can be used elsewhere 

The export command makes it easy to take existing objects and convert them to configuration files for backups or for creating elsewhere in the cluster. Fields that cannot be specified on create will be set to empty, and any field which is assigned on creation (like a service's clusterIP, or a deployment config's latestVersion). The status part of objects is also cleared. 

Some fields like clusterIP may be useful when exporting an application from one cluster to apply to another - assuming another service on the destination cluster does not already use that IP. The --exact flag will instruct export to not clear fields that might be useful. You may also use --raw to get the exact values for an object - useful for converting a file on disk between API versions. 

Another use case for export is to create reusable templates for applications. Pass --as-template to generate the API structure for a template to which you can add parameters and object labels.

Usage:
  oc export RESOURCE/NAME ... [flags]

Examples:
  # export the services and deployment configurations labeled name=test
  oc export svc,dc -l name=test
  
  # export all services to a template
  oc export service --as-template=test
  
  # export to JSON
  oc export service -o json

Options:
      --all-namespaces=false: If true, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --as-template='': Output a Template object with specified name instead of a List or single object.
      --exact=false: If true, preserve fields that may be cluster specific, such as service clusterIPs or generated names
  -f, --filename=[]: Filename, directory, or URL to files Filename, directory, or URL to file for the resource to export.
  -o, --output='yaml': Output format. One of: json|yaml|name|templatefile|template|go-template|go-template-file|jsonpath|jsonpath-file.
      --raw=false: If true, do not alter the resources in any way after they are loaded.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help extract 
Extract files out of secrets and config maps 

The extract command makes it easy to download the contents of a config map or secret into a directory. Each key in the config map or secret is created as a separate file with the name of the key, as it is when you mount a secret or config map into a container. 

You may extract the contents of a secret or config map to standard out by passing '-' to --to. The names of each key will be written to stdandard error. 

You can limit which keys are extracted with the --keys=NAME flag, or set the directory to extract to with --to=DIRECTORY.

Usage:
  oc extract RESOURCE/NAME [--to=DIRECTORY] [--keys=KEY ...] [flags]

Examples:
  # extract the secret "test" to the current directory
  oc extract secret/test
  
  # extract the config map "nginx" to the /tmp directory
  oc extract configmap/nginx --to=/tmp
  
  # extract the config map "nginx" to STDOUT
  oc extract configmap/nginx --to=-
  
  # extract only the key "nginx.conf" from config map "nginx" to the /tmp directory
  oc extract configmap/nginx --to=/tmp --keys=nginx.conf

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --confirm=false: If true, overwrite files that already exist.
  -f, --filename=[]: Filename, directory, or URL to file to identify to extract the resource.
      --keys=[]: An optional list of keys to extract (default is all keys).
      --no-headers=false: When using the default or custom-column output format, don't print headers (default print headers).
  -o, --output='': Output format. One of: json|yaml|wide|name|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=... See custom columns [http://kubernetes.io/docs/user-guide/kubectl-overview/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [http://kubernetes.io/docs/user-guide/jsonpath].
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --to='.': Directory to extract files to.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help idle 
Idle scalable resources 

Idling discovers the scalable resources (such as deployment configs and replication controllers) associated with a series of services by examining the endpoints of the service. Each service is then marked as idled, the associated resources are recorded, and the resources are scaled down to zero replicas. 

Upon receiving network traffic, the services (and any associated routes) will "wake up" the associated resources by scaling them back up to their previous scale.

Usage:
  oc idle (SERVICE_ENDPOINTS... | -l label | --all | --resource-names-file FILENAME) [flags]

Examples:
  # Idle the scalable controllers associated with the services listed in to-idle.txt
  $ oc idle --resource-names-file to-idle.txt

Options:
      --all=false: if true, select all services in the namespace
      --all-namespaces=false: if true, select services across all namespaces
      --dry-run=false: If true, only print the annotations that would be written, without annotating or idling the relevant objects
      --resource-names-file='': file containing list of services whose scalable resources to idle
  -l, --selector='': Selector (label query) to use to select services

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help observe 
Observe changes to resources and take action on them 

This command assists in building scripted reactions to changes that occur in Kubernetes or OpenShift resources. This is frequently referred to as a 'controller' in Kubernetes and acts to ensure particular conditions are maintained. On startup, observe will list all of the resources of a particular type and execute the provided script on each one. Observe watches the server for changes, and will reexecute the script for each update. 

Observe works best for problems of the form "for every resource X, make sure Y is true". Some examples of ways observe can be used include: 

  * Ensure every namespace has a quota or limit range object  
  * Ensure every service is registered in DNS by making calls to a DNS API  
  * Send an email alert whenever a node reports 'NotReady'  
  * Watch for the 'FailedScheduling' event and write an IRC message  
  * Dynamically provision persistent volumes when a new PVC is created  
  * Delete pods that have reached successful completion after a period of time.  

The simplest pattern is maintaining an invariant on an object - for instance, "every namespace should have an annotation that indicates its owner". If the object is deleted no reaction is necessary. A variation on that pattern is creating another object: "every namespace should have a quota object based on the resources allowed for an owner". 

  $ cat set_owner.sh
  #!/bin/sh
  if [[ "$(oc get namespace "$1" --template='{{ .metadata.annotations.owner }}')" == "" ]]; then
    oc annotate namespace "$1" owner=bob
  fi
  
  $ oc observe namespaces -- ./set_owner.sh
  
The set _owner.sh script is invoked with a single argument (the namespace name) for each namespace. This simple script ensures that any user without the "owner" annotation gets one set, but preserves any existing value. 

The next common of controller pattern is provisioning - making changes in an external system to match the state of a Kubernetes resource. These scripts need to account for deletions that may take place while the observe command is not running. You can provide the list of known objects via the --names command, which should return a newline-delimited list of names or namespace/name pairs. Your command will be invoked whenever observe checks the latest state on the server - any resources returned by --names that are not found on the server will be passed to your --delete command. 

For example, you may wish to ensure that every node that is added to Kubernetes is added to your cluster inventory along with its IP: 

  $ cat add_to_inventory.sh
  #!/bin/sh
  echo "$1 $2" >> inventory
  sort -u inventory -o inventory
  
  $ cat remove_from_inventory.sh
  #!/bin/sh
  grep -vE "^$1 " inventory > /tmp/newinventory
  mv -f /tmp/newinventory inventory
  
  $ cat known_nodes.sh
  #!/bin/sh
  touch inventory
  cut -f 1-1 -d ' ' inventory
  
  $ oc observe nodes -a '{ .status.addresses[0].address }' \
    --names ./known_nodes.sh \
    --delete ./remove_from_inventory.sh \
    -- ./add_to_inventory.sh
  
If you stop the observe command and then delete a node, when you launch observe again the contents of inventory will be compared to the list of nodes from the server, and any node in the inventory file that no longer exists will trigger a call to remove from inventory.sh with the name of the node. 

Important: when handling deletes, the previous state of the object may not be available and only the name/namespace of the object will be passed to   your --delete command as arguments (all custom arguments are omitted). 

More complicated interactions build on the two examples above - your inventory script could make a call to allocate storage on your infrastructure as a service, or register node names in DNS, or set complex firewalls. The more complex your integration, the more important it is to record enough data in the remote system that you can identify when resources on either side are deleted.

Usage:
  oc observe RESOURCE [-- COMMAND ...] [flags]

Examples:
  # Observe changes to services
  oc observe services
  
  # Observe changes to services, including the clusterIP and invoke a script for each
  oc observe services -a '{ .spec.clusterIP }' -- register_dns.sh

Options:
      --all-namespaces=false: If true, list the requested object(s) across all projects. Project in current context is ignored.
  -a, --argument='': Template for the arguments to be passed to each command in the format defined by --output.
  -d, --delete='': A command to run when resources are deleted. Specify multiple times to add arguments.
      --exit-after=0s: Exit with status code 0 after the provided duration, optional.
      --listen-addr=':11251': The name of an interface to listen on to expose metrics and health checking.
      --maximum-errors=20: Exit after this many errors have been detected with. May be set to -1 for no maximum.
      --names='': A command that will list all of the currently known names, optional. Specify multiple times to add arguments. Use to get notifications when objects are deleted.
      --no-headers=false: If true, skip printing information about each event prior to executing the command.
      --object-env-var='': The name of an env var to serialize the object to when calling the command, optional.
      --once=false: If true, exit with a status code 0 after all current objects have been processed.
      --output='jsonpath': Controls the template type used for the --argument flags. Supported values are gotemplate and jsonpath.
      --print-metrics-on-exit=false: If true, on exit write all metrics to stdout.
      --resync-period=0s: When non-zero, periodically reprocess every item from the server as a Sync event. Use to ensure external systems are kept up to date.
      --retry-count=2: The number of times to retry a failing command before continuing.
      --retry-on-exit-code=0: If any command returns this exit code, retry up to --retry-count times.
      --strict-templates=false: If true return an error on any field or map key that is not missing in a template.
      --type-env-var='': The name of an env var to set with the type of event received ('Sync', 'Updated', 'Deleted', 'Added') to the reaction command or --delete.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help policy 
Manage authorization policy

Usage:
  oc policy [flags]

Available Commands:
  add-role-to-group      Add a role to groups for the current project
  add-role-to-user       Add a role to users or serviceaccounts for the current project
  can-i                  Check whether an action is allowed
  remove-group           Remove group from the current project
  remove-role-from-group Remove a role from groups for the current project
  remove-role-from-user  Remove a role from users for the current project
  remove-user            Remove user from the current project
  scc-review             Checks which ServiceAccount can create a Pod
  scc-subject-review     Check whether a user or a ServiceAccount can create a Pod.
  who-can                List who can perform the specified action on a resource

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc help auth 
Inspect authorization

Usage:
  oc auth [flags]

Available Commands:
  can-i       Check whether an action is allowed
  reconcile   Reconciles rules for RBAC Role, RoleBinding, ClusterRole, and ClusterRole binding objects

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc help convert 
Convert config files between different API versions. Both YAML and JSON formats are accepted. 

The command takes filename, directory, or URL as input, and convert it into format of version specified by --output-version flag. If target version is not specified or not supported, convert to latest version. 

The default output will be printed to stdout in YAML format. One can use -o option to change to output destination.

Usage:
  oc convert -f FILENAME [flags]

Examples:
  # Convert 'pod.yaml' to latest version and print to stdout.
  oc convert -f pod.yaml
  
  # Convert the live state of the resource specified by 'pod.yaml' to the latest version
  # and print to stdout in json format.
  oc convert -f pod.yaml --local -o json
  
  # Convert all files under current directory to latest version and create them all.
  oc convert -f . | oc create -f -

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
  -f, --filename=[]: Filename, directory, or URL to files to need to get converted.
      --local=true: If true, convert will NOT try to contact api-server but run locally.
  -o, --output='yaml': Output format. One of: json|yaml|name|go-template-file|templatefile|template|go-template|jsonpath|jsonpath-file.
      --output-version='': Output the formatted object with the given group version (for ex: 'extensions/v1beta1').)
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
      --validate=false: If true, use a schema to validate the input before sending it

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help import 
Import outside applications into OpenShift 

These commands assist in bringing existing applications into OpenShift.

Usage:
  oc import COMMAND [flags]

Available Commands:
  app.json    Import an app.json definition into OpenShift (experimental)

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc help image 
Manage images on OpenShift 

These commands help you manage images on OpenShift.

Usage:
  oc image COMMAND [flags]

Advanced commands:
  append      Add layers to images and push them to a registry
  extract     Copy files from an image to the filesystem
  mirror      Mirror images from one repository to another

Use "oc image <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc image append --help 
Add layers to Docker images 

Modifies an existing image by adding layers or changing configuration and then pushes that image to a remote registry. Any inherited layers are streamed from registry to registry without being stored locally. The default docker credentials are used for authenticating to the registries. 

Layers may be provided as arguments to the command and must each be a gzipped tar archive representing a filesystem overlay to the inherited images. The archive may contain a "whiteout" file (the prefix '.wh.' and the filename) which will hide files in the lower layers. All supported filesystem attributes present in the archive will be used as is. 

Metadata about the image (the configuration passed to the container runtime) may be altered by passing a JSON string to the --image or --meta options. The --image flag changes what the container runtime sees, while the --meta option allows you to change the attributes of the image used by the runtime. Use --dry-run to see the result of your changes. You may add the --drop-history flag to remove information from the image about the system that built the base image. 

Images in manifest list format will automatically select an image that matches the current operating system and architecture unless you use --filter-by-os to select a different image. This flag has no effect on regular images.

Usage:
  oc image append [flags]

Examples:
  # Remove the entrypoint on the mysql:latest image
  oc image --from mysql:latest --to myregistry.com/myimage:latest --image {"Entrypoint":null}
  
  # Add a new layer to the image
  oc image --from mysql:latest --to myregistry.com/myimage:latest layer.tar.gz

Options:
      --created-at='': The creation date for this image, in RFC3339 format or milliseconds from the Unix epoch.
      --drop-history=false: Fields on the image that relate to the history of how the image was created will be removed.
      --dry-run=false: Print the actions that would be taken and exit without writing to the destination.
      --filter-by-os='': A regular expression to control which images are mirrored. Images will be passed as '<platform>/<architecture>[/<variant>]'.
      --force=false: If set, the command will attempt to upload all layers instead of skipping those that are already uploaded.
      --from='': The image to use as a base. If empty, a new scratch image is created.
      --image='': A JSON patch that will be used with the output image data.
      --insecure=false: Allow push and pull operations to registries to be made over HTTP
      --max-per-registry=3: Number of concurrent requests allowed per registry.
      --meta='': A JSON patch that will be used with image base metadata (advanced config).
      --to='': The Docker repository tag to upload the appended image to.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc image extract --help 
Extract the contents of an image to disk 

Download an image or parts of an image to the filesystem. Allows users to access the contents of images without requiring a container runtime engine running. 

Pass images to extract as arguments. The --paths flag allows you to define multiple source to destination directory mappings. The source section may be either a file, a directory (ends with a '/'), or a file pattern within a directory. The destination section is a directory to extract to. Both source and destination must be specified. 

If the specified image supports multiple operating systems, the image that matches the current operating system will be chosen. Otherwise you must pass --filter-by-os to select the desired image. 

You may further qualify the image by adding a layer selector to the end of the image string to only extract specific layers within an image. The supported selectors are: 

 [ <index>] - select the layer at the provided index (zero-indexed)  [ <from_index>, <to_index>] - select layers by index, exclusive  [~ <prefix>] - select the layer with the matching prefix or return an error 

Negative indices are counted from the end of the list, e.g. [-1] selects the last layer. 

Experimental: This command is under active development and may change without notice.

Usage:
  oc image extract [flags]

Examples:
  # Extract the busybox image into the current directory
  oc image docker.io/library/busybox:latest
  
  # Extract the busybox image to a temp directory (must exist)
  oc image docker.io/library/busybox:latest --path /:/tmp/busybox
  
  # Extract a single file from the image into the current directory
  oc image docker.io/library/centos:7 --path /bin/bash:.
  
  # Extract all .repo files from the image's /etc/yum.repos.d/ folder.
  oc image docker.io/library/centos:7 --path /etc/yum.repos.d/*.repo:.
  
  # Extract the last layer in the image
  oc image docker.io/library/centos:7[-1]
  
  # Extract the first three layers of the image
  oc image docker.io/library/centos:7[:3]
  
  # Extract the last three layers of the image
  oc image docker.io/library/centos:7[-3:]

Options:
      --dry-run=false: Print the actions that would be taken and exit without writing any contents.
      --filter-by-os='': A regular expression to control which images are mirrored. Images will be passed as '<platform>/<architecture>[/<variant>]'.
      --insecure=false: Allow pull operations to registries to be made over HTTP
      --only-files=false: Only extract regular files and directories from the image.
      --path=[/:.]: Extract only part of an image. Must be SRC:DST where SRC is the path within the image and DST a local directory. If not specified the default is to extract everything to the current directory.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc image mirror --help 
Mirror images from one image repository to another. 

Accepts a list of arguments defining source images that should be pushed to the provided destination image tag. The images are streamed from registry to registry without being stored locally. The default docker credentials are used for authenticating to the registries. 

When using S3 mirroring the region and bucket must be the first two segments after the host. Mirroring will create the necessary metadata so that images can be pulled via tag or digest, but listing manifests and tags will not be possible. You may also specify one or more --s3-source-bucket parameters (as <bucket>/ <path>) to designate buckets to look in to find blobs (instead of uploading). The source bucket also supports the suffix "/ [store]", which will transform blob identifiers into the form the Docker registry uses on disk, allowing you to mirror directly from an existing S3-backed Docker registry. Credentials for S3 may be stored in your docker credential file and looked up by host. 

Images in manifest list format will be copied as-is unless you use --filter-by-os to restrict the allowed images to copy in a manifest list. This flag has no effect on regular images.

Usage:
  oc image mirror SRC DST [DST ...] [flags]

Examples:
  # Copy image to another tag
  oc image mirror myregistry.com/myimage:latest myregistry.com/myimage:stable
  
  # Copy image to another registry
  oc image mirror myregistry.com/myimage:latest docker.io/myrepository/myimage:stable
  
  # Copy image to S3 (pull from <bucket>.s3.amazonaws.com/image:latest)
  oc image mirror myregistry.com/myimage:latest s3://s3.amazonaws.com/<region>/<bucket>/image:latest
  
  # Copy image to S3 without setting a tag (pull via @<digest>)
  oc image mirror myregistry.com/myimage:latest s3://s3.amazonaws.com/<region>/<bucket>/image
  
  # Copy image to multiple locations
  oc image mirror myregistry.com/myimage:latest docker.io/myrepository/myimage:stable \
  docker.io/myrepository/myimage:dev
  
  # Copy multiple images
  oc image mirror myregistry.com/myimage:latest=myregistry.com/other:test \
  myregistry.com/myimage:new=myregistry.com/other:target

Options:
      --dry-run=false: Print the actions that would be taken and exit without writing to the destinations.
  -f, --filename=[]: One or more files to read SRC=DST or SRC DST [DST ...] mappings from.
      --filter-by-os='': A regular expression to control which images are mirrored. Images will be passed as '<platform>/<architecture>[/<variant>]'.
      --force=false: Attempt to write all layers and manifests even if they exist in the remote repository.
      --insecure=false: Allow push and pull operations to registries to be made over HTTP
      --max-per-registry=6: Number of concurrent requests allowed per registry.
      --max-registry=4: Number of concurrent registries to connect to at any one time.
      --s3-source-bucket=[]: A list of bucket/path locations on S3 that may contain already uploaded blobs. Add [store] to the end to use the Docker registry path convention.
      --skip-mount=false: Always push layers instead of cross-mounting them
      --skip-multiple-scopes=false: Some registries do not support multiple scopes passed to the registry login.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help registry 
Manage the integrated registry on OpenShift 

These commands help you work with an integrated OpenShift registry.

Usage:
  oc registry COMMAND [flags]

Advanced commands:
  info        Print info about the integrated registry
  login       Login to the integrated registry

Use "oc registry <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc registry info --help 
Display information about the integrated registry 

This command exposes information about the integrated registry, if configured. Use --check to verify your local client can access the registry. If the adminstrator has not configured a public hostname for the registry then this command may fail when run outside of the server. 

Experimental: This command is under active development and may change without notice.

Usage:
  oc registry info  [flags]

Examples:
  # Display information about the integrated registry
  oc registry login

Options:
      --check=false: Attempt to contact the integrated registry.
      --internal=false: Only check the internal registry hostname.
      --public=false: Only check the public registry hostname.
  -q, --quiet=false: Suppress normal output and only print status.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc registry login --help 
Login to the OpenShift integrated registry. 

This logs your local Docker client into the OpenShift integrated registry using the external registry name (if configured by your administrator). You may also log in using a service account if you have access to its credentials. If you are logged in to the server using a client certificate the command will report an error because Docker commands do not generally allow client certificates. 

You may specify an alternate file to write credentials to with --to instead of .docker/config.json in your home directory. If you pass --to=- the file will be written to standard output. 

To detect the registry hostname the client will attempt to find an image stream in the current namespace or the openshift namespace and use the status fields that indicate the registry hostnames. If no image stream is found or if you do not have permission to view image streams you will have to pass the --registry flag with the desired hostname. 

Experimental: This command is under active development and may change without notice.

Usage:
  oc registry login  [flags]

Examples:
  # Log in to the integrated registry
  oc registry login
  
  # Log in as the default service account in the current namespace
  oc registry login -z default

Options:
      --insecure=false: Bypass HTTPS certificate verification when checking the registry login.
      --registry='': An alternate domain name and port to use for the registry, defaults to the cluster's configured external hostname.
  -z, --service-account='': Log in as the specified service account name in the specified namespace.
      --skip-check=false: Skip checking the credentials against the registry.
      --to='': The location of the Docker config.json your credentials will be stored in.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help api-versions 
Print the supported API versions on the server, in the form of "group/version"

Usage:
  oc api-versions [flags]

Examples:
  # Print the supported API versions
  oc api-versions

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help api-resources 
Print the supported API resources on the server

Usage:
  oc api-resources [flags]

Examples:
  # Print the supported API Resources
  oc api-resources
  
  # Print the supported API Resources with more information
  oc api-resources -o wide
  
  # Print the supported namespaced resources
  oc api-resources --namespaced=true
  
  # Print the supported non-namespaced resources
  oc api-resources --namespaced=false
  
  # Print the supported API Resources with specific APIGroup
  oc api-resources --api-group=extensions

Options:
      --api-group='': Limit to resources in the specified API group.
      --cached=false: Use the cached list of resources if available.
      --namespaced=true: If false, non-namespaced resources will be returned, otherwise returning namespaced resources by default.
      --no-headers=false: When using the default or custom-column output format, don't print headers (default print headers).
  -o, --output='': Output format. One of: wide|name.
      --verbs=[]: Limit to resources that support the specified verbs.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help logout 
Log out of the active session out by clearing saved tokens 

An authentication token is stored in the config file after login - this command will delete that token on the server, and then remove the token from the configuration file. 

If you are using an alternative authentication method like Kerberos or client certificates, your ticket or client certificate will not be removed from the current system since these are typically managed by other programs. Instead, you can delete your config file to remove the local copy of that certificate or the record of your server login. 

After logging out, if you want to log back into the server use 'oc login'.

Usage:
  oc logout [flags]

Examples:
  # Logout
  oc logout

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help config 
Manage the client config files 

The client stores configuration in the current user's home directory (under the .kube directory as config). When you login the first time, a new config file is created, and subsequent project changes with the 'project' command will set the current context. These subcommands allow you to manage the config directly. 

Reference: https://github.com/kubernetes/kubernetes/blob/master/docs/user-guide/kubeconfig-file.md

Usage:
  oc config SUBCOMMAND [flags]

Examples:
  # Change the config context to use
  oc config use-context my-context
  
  # Set the value of a config preference
  oc config set preferences.some true

Available Commands:
  current-context Displays the current-context
  delete-cluster  Delete the specified cluster from the kubeconfig
  delete-context  Delete the specified context from the kubeconfig
  get-clusters    Display clusters defined in the kubeconfig
  get-contexts    Describe one or many contexts
  rename-context  Renames a context from the kubeconfig file.
  set             Sets an individual value in a kubeconfig file
  set-cluster     Sets a cluster entry in kubeconfig
  set-context     Sets a context entry in kubeconfig
  set-credentials Sets a user entry in kubeconfig
  unset           Unsets an individual value in a kubeconfig file
  use-context     Sets the current-context in a kubeconfig file
  view            Display merged kubeconfig settings or a specified kubeconfig file

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc help whoami 
Show information about the current session 

The default options for this command will return the currently authenticated user name or an empty string.  Other flags support returning the currently used token or the user context.

Usage:
  oc whoami [flags]

Options:
  -c, --show-context=false: Print the current user context name
      --show-server=false: If true, print the current server's REST API URL
  -t, --show-token=false: Print the token the current session is using. This will return an error if you are using a different form of authentication.

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help completion 
This command prints shell code which must be evaluated to provide interactive completion of oc commands.

Usage:
  oc completion SHELL [flags]

Examples:
  # Generate the oc completion code for bash
  oc completion bash > bash_completion.sh
  source bash_completion.sh
  
  # The above example depends on the bash-completion framework.
  # It must be sourced before sourcing the openshift cli completion,
  # i.e. on the Mac:
  
  brew install bash-completion
  source $(brew --prefix)/etc/bash_completion
  oc completion bash > bash_completion.sh
  source bash_completion.sh
  
  # In zsh*, the following will load openshift cli zsh completion:
  source <(oc completion zsh)
  
  * zsh completions are only supported in versions of zsh >= 5.2

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help ex 
The commands grouped here are under development and may change without notice.

Usage:
  oc ex [flags]

Available Commands:
  build-chain  Output the inputs and dependencies of your builds
  config       Manage config
  diagnostics  Diagnose common cluster problems
  dockergc     Perform garbage collection to free space in docker storage
  ipfailover   Install an IP failover group to a set of nodes
  prune-groups Remove old OpenShift groups referencing missing records on an external provider
  sync-groups  Sync OpenShift groups with records from an external provider.

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).

>oc help help 
Help provides help for any command in the application.
Simply type oc help [path to command] for full details.

Usage:
  oc help [command] [flags]

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help plugin 
Runs a command-line plugin. 

Plugins are subcommands that are not part of the major command-line distribution and can even be provided by third-parties. Please refer to the documentation and examples for more information about how to install and write your own plugins.

Usage:
  oc plugin NAME [flags]

Use "oc options" for a list of global command-line options (applies to all commands).

>oc help version 
Display client and server versions.

Usage:
  oc version [flags]

Use "oc options" for a list of global command-line options (applies to all commands).

>oc api-resources 
NAME                                  SHORTNAMES     APIGROUP                       NAMESPACED   KIND
bindings                                                                            true         Binding
componentstatuses                     cs                                            false        ComponentStatus
configmaps                            cm                                            true         ConfigMap
endpoints                             ep                                            true         Endpoints
events                                ev                                            true         Event
limitranges                           limits                                        true         LimitRange
namespaces                            ns                                            false        Namespace
nodes                                 no                                            false        Node
persistentvolumeclaims                pvc                                           true         PersistentVolumeClaim
persistentvolumes                     pv                                            false        PersistentVolume
pods                                  po                                            true         Pod
podtemplates                                                                        true         PodTemplate
replicationcontrollers                rc                                            true         ReplicationController
resourcequotas                        quota                                         true         ResourceQuota
secrets                                                                             true         Secret
securitycontextconstraints            scc                                           false        SecurityContextConstraints
serviceaccounts                       sa                                            true         ServiceAccount
services                              svc                                           true         Service
mutatingwebhookconfigurations                        admissionregistration.k8s.io   false        MutatingWebhookConfiguration
validatingwebhookconfigurations                      admissionregistration.k8s.io   false        ValidatingWebhookConfiguration
customresourcedefinitions             crd,crds       apiextensions.k8s.io           false        CustomResourceDefinition
apiservices                                          apiregistration.k8s.io         false        APIService
controllerrevisions                                  apps                           true         ControllerRevision
daemonsets                            ds             apps                           true         DaemonSet
deployments                           deploy         apps                           true         Deployment
replicasets                           rs             apps                           true         ReplicaSet
statefulsets                          sts            apps                           true         StatefulSet
deploymentconfigs                     dc             apps.openshift.io              true         DeploymentConfig
tokenreviews                                         authentication.k8s.io          false        TokenReview
localsubjectaccessreviews                            authorization.k8s.io           true         LocalSubjectAccessReview
selfsubjectaccessreviews                             authorization.k8s.io           false        SelfSubjectAccessReview
selfsubjectrulesreviews                              authorization.k8s.io           false        SelfSubjectRulesReview
subjectaccessreviews                                 authorization.k8s.io           false        SubjectAccessReview
clusterrolebindings                                  authorization.openshift.io     false        ClusterRoleBinding
clusterroles                                         authorization.openshift.io     false        ClusterRole
localresourceaccessreviews                           authorization.openshift.io     true         LocalResourceAccessReview
localsubjectaccessreviews                            authorization.openshift.io     true         LocalSubjectAccessReview
resourceaccessreviews                                authorization.openshift.io     false        ResourceAccessReview
rolebindingrestrictions                              authorization.openshift.io     true         RoleBindingRestriction
rolebindings                                         authorization.openshift.io     true         RoleBinding
roles                                                authorization.openshift.io     true         Role
selfsubjectrulesreviews                              authorization.openshift.io     true         SelfSubjectRulesReview
subjectaccessreviews                                 authorization.openshift.io     false        SubjectAccessReview
subjectrulesreviews                                  authorization.openshift.io     true         SubjectRulesReview
horizontalpodautoscalers              hpa            autoscaling                    true         HorizontalPodAutoscaler
cronjobs                              cj             batch                          true         CronJob
jobs                                                 batch                          true         Job
buildconfigs                          bc             build.openshift.io             true         BuildConfig
builds                                               build.openshift.io             true         Build
certificatesigningrequests            csr            certificates.k8s.io            false        CertificateSigningRequest
events                                ev             events.k8s.io                  true         Event
daemonsets                            ds             extensions                     true         DaemonSet
deployments                           deploy         extensions                     true         Deployment
ingresses                             ing            extensions                     true         Ingress
networkpolicies                       netpol         extensions                     true         NetworkPolicy
podsecuritypolicies                   psp            extensions                     false        PodSecurityPolicy
replicasets                           rs             extensions                     true         ReplicaSet
images                                               image.openshift.io             false        Image
imagesignatures                                      image.openshift.io             false        ImageSignature
imagestreamimages                     isimage        image.openshift.io             true         ImageStreamImage
imagestreamimports                                   image.openshift.io             true         ImageStreamImport
imagestreammappings                                  image.openshift.io             true         ImageStreamMapping
imagestreams                          is             image.openshift.io             true         ImageStream
imagestreamtags                       istag          image.openshift.io             true         ImageStreamTag
nodes                                                metrics.k8s.io                 false        NodeMetrics
pods                                                 metrics.k8s.io                 true         PodMetrics
alertmanagers                                        monitoring.coreos.com          true         Alertmanager
prometheuses                                         monitoring.coreos.com          true         Prometheus
prometheusrules                                      monitoring.coreos.com          true         PrometheusRule
servicemonitors                                      monitoring.coreos.com          true         ServiceMonitor
clusternetworks                                      network.openshift.io           false        ClusterNetwork
egressnetworkpolicies                                network.openshift.io           true         EgressNetworkPolicy
hostsubnets                                          network.openshift.io           false        HostSubnet
netnamespaces                                        network.openshift.io           false        NetNamespace
networkpolicies                       netpol         networking.k8s.io              true         NetworkPolicy
oauthaccesstokens                                    oauth.openshift.io             false        OAuthAccessToken
oauthauthorizetokens                                 oauth.openshift.io             false        OAuthAuthorizeToken
oauthclientauthorizations                            oauth.openshift.io             false        OAuthClientAuthorization
oauthclients                                         oauth.openshift.io             false        OAuthClient
poddisruptionbudgets                  pdb            policy                         true         PodDisruptionBudget
podsecuritypolicies                   psp            policy                         false        PodSecurityPolicy
projectrequests                                      project.openshift.io           false        ProjectRequest
projects                                             project.openshift.io           false        Project
appliedclusterresourcequotas                         quota.openshift.io             true         AppliedClusterResourceQuota
clusterresourcequotas                 clusterquota   quota.openshift.io             false        ClusterResourceQuota
clusterrolebindings                                  rbac.authorization.k8s.io      false        ClusterRoleBinding
clusterroles                                         rbac.authorization.k8s.io      false        ClusterRole
rolebindings                                         rbac.authorization.k8s.io      true         RoleBinding
roles                                                rbac.authorization.k8s.io      true         Role
routes                                               route.openshift.io             true         Route
priorityclasses                       pc             scheduling.k8s.io              false        PriorityClass
podsecuritypolicyreviews                             security.openshift.io          true         PodSecurityPolicyReview
podsecuritypolicyselfsubjectreviews                  security.openshift.io          true         PodSecurityPolicySelfSubjectReview
podsecuritypolicysubjectreviews                      security.openshift.io          true         PodSecurityPolicySubjectReview
rangeallocations                                     security.openshift.io          false        RangeAllocation
securitycontextconstraints            scc            security.openshift.io          false        SecurityContextConstraints
storageclasses                        sc             storage.k8s.io                 false        StorageClass
volumeattachments                                    storage.k8s.io                 false        VolumeAttachment
brokertemplateinstances                              template.openshift.io          false        BrokerTemplateInstance
processedtemplates                                   template.openshift.io          true         Template
templateinstances                                    template.openshift.io          true         TemplateInstance
templates                                            template.openshift.io          true         Template
groups                                               user.openshift.io              false        Group
identities                                           user.openshift.io              false        Identity
useridentitymappings                                 user.openshift.io              false        UserIdentityMapping
users                                                user.openshift.io              false        User
